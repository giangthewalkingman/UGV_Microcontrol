
UGV-Microcontrol.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b6c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003cf4  08003cf4  00013cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d0c  08003d0c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003d0c  08003d0c  00013d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d14  08003d14  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d14  08003d14  00013d14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d18  08003d18  00013d18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003d1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000144  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000150  20000150  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000d7f5  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002294  00000000  00000000  0002d874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000d10  00000000  00000000  0002fb08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000a29  00000000  00000000  00030818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00021547  00000000  00000000  00031241  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00010af8  00000000  00000000  00052788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ca7a2  00000000  00000000  00063280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000035e4  00000000  00000000  0012da24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008d  00000000  00000000  00131008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003cdc 	.word	0x08003cdc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003cdc 	.word	0x08003cdc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80004c8:	4b06      	ldr	r3, [pc, #24]	; (80004e4 <MX_CRC_Init+0x20>)
 80004ca:	4a07      	ldr	r2, [pc, #28]	; (80004e8 <MX_CRC_Init+0x24>)
 80004cc:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80004ce:	4805      	ldr	r0, [pc, #20]	; (80004e4 <MX_CRC_Init+0x20>)
 80004d0:	f001 f82b 	bl	800152a <HAL_CRC_Init>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d001      	beq.n	80004de <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80004da:	f000 fbbb 	bl	8000c54 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80004de:	bf00      	nop
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	20000028 	.word	0x20000028
 80004e8:	40023000 	.word	0x40023000

080004ec <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b085      	sub	sp, #20
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a0b      	ldr	r2, [pc, #44]	; (8000528 <HAL_CRC_MspInit+0x3c>)
 80004fa:	4293      	cmp	r3, r2
 80004fc:	d10d      	bne.n	800051a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80004fe:	2300      	movs	r3, #0
 8000500:	60fb      	str	r3, [r7, #12]
 8000502:	4b0a      	ldr	r3, [pc, #40]	; (800052c <HAL_CRC_MspInit+0x40>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000506:	4a09      	ldr	r2, [pc, #36]	; (800052c <HAL_CRC_MspInit+0x40>)
 8000508:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800050c:	6313      	str	r3, [r2, #48]	; 0x30
 800050e:	4b07      	ldr	r3, [pc, #28]	; (800052c <HAL_CRC_MspInit+0x40>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000512:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000516:	60fb      	str	r3, [r7, #12]
 8000518:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800051a:	bf00      	nop
 800051c:	3714      	adds	r7, #20
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop
 8000528:	40023000 	.word	0x40023000
 800052c:	40023800 	.word	0x40023800

08000530 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b08a      	sub	sp, #40	; 0x28
 8000534:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000536:	f107 0314 	add.w	r3, r7, #20
 800053a:	2200      	movs	r2, #0
 800053c:	601a      	str	r2, [r3, #0]
 800053e:	605a      	str	r2, [r3, #4]
 8000540:	609a      	str	r2, [r3, #8]
 8000542:	60da      	str	r2, [r3, #12]
 8000544:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000546:	2300      	movs	r3, #0
 8000548:	613b      	str	r3, [r7, #16]
 800054a:	4b4d      	ldr	r3, [pc, #308]	; (8000680 <MX_GPIO_Init+0x150>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	4a4c      	ldr	r2, [pc, #304]	; (8000680 <MX_GPIO_Init+0x150>)
 8000550:	f043 0304 	orr.w	r3, r3, #4
 8000554:	6313      	str	r3, [r2, #48]	; 0x30
 8000556:	4b4a      	ldr	r3, [pc, #296]	; (8000680 <MX_GPIO_Init+0x150>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055a:	f003 0304 	and.w	r3, r3, #4
 800055e:	613b      	str	r3, [r7, #16]
 8000560:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000562:	2300      	movs	r3, #0
 8000564:	60fb      	str	r3, [r7, #12]
 8000566:	4b46      	ldr	r3, [pc, #280]	; (8000680 <MX_GPIO_Init+0x150>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056a:	4a45      	ldr	r2, [pc, #276]	; (8000680 <MX_GPIO_Init+0x150>)
 800056c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000570:	6313      	str	r3, [r2, #48]	; 0x30
 8000572:	4b43      	ldr	r3, [pc, #268]	; (8000680 <MX_GPIO_Init+0x150>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800057a:	60fb      	str	r3, [r7, #12]
 800057c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800057e:	2300      	movs	r3, #0
 8000580:	60bb      	str	r3, [r7, #8]
 8000582:	4b3f      	ldr	r3, [pc, #252]	; (8000680 <MX_GPIO_Init+0x150>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000586:	4a3e      	ldr	r2, [pc, #248]	; (8000680 <MX_GPIO_Init+0x150>)
 8000588:	f043 0301 	orr.w	r3, r3, #1
 800058c:	6313      	str	r3, [r2, #48]	; 0x30
 800058e:	4b3c      	ldr	r3, [pc, #240]	; (8000680 <MX_GPIO_Init+0x150>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	60bb      	str	r3, [r7, #8]
 8000598:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800059a:	2300      	movs	r3, #0
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	4b38      	ldr	r3, [pc, #224]	; (8000680 <MX_GPIO_Init+0x150>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	4a37      	ldr	r2, [pc, #220]	; (8000680 <MX_GPIO_Init+0x150>)
 80005a4:	f043 0302 	orr.w	r3, r3, #2
 80005a8:	6313      	str	r3, [r2, #48]	; 0x30
 80005aa:	4b35      	ldr	r3, [pc, #212]	; (8000680 <MX_GPIO_Init+0x150>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	f003 0302 	and.w	r3, r3, #2
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005b6:	2300      	movs	r3, #0
 80005b8:	603b      	str	r3, [r7, #0]
 80005ba:	4b31      	ldr	r3, [pc, #196]	; (8000680 <MX_GPIO_Init+0x150>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	4a30      	ldr	r2, [pc, #192]	; (8000680 <MX_GPIO_Init+0x150>)
 80005c0:	f043 0308 	orr.w	r3, r3, #8
 80005c4:	6313      	str	r3, [r2, #48]	; 0x30
 80005c6:	4b2e      	ldr	r3, [pc, #184]	; (8000680 <MX_GPIO_Init+0x150>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	f003 0308 	and.w	r3, r3, #8
 80005ce:	603b      	str	r3, [r7, #0]
 80005d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6|GPIO_PIN_7
 80005d2:	2200      	movs	r2, #0
 80005d4:	f24c 31c0 	movw	r1, #50112	; 0xc3c0
 80005d8:	482a      	ldr	r0, [pc, #168]	; (8000684 <MX_GPIO_Init+0x154>)
 80005da:	f001 f9e5 	bl	80019a8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 80005de:	2200      	movs	r2, #0
 80005e0:	211e      	movs	r1, #30
 80005e2:	4829      	ldr	r0, [pc, #164]	; (8000688 <MX_GPIO_Init+0x158>)
 80005e4:	f001 f9e0 	bl	80019a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80005e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80005ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ee:	2301      	movs	r3, #1
 80005f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f2:	2300      	movs	r3, #0
 80005f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f6:	2300      	movs	r3, #0
 80005f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005fa:	f107 0314 	add.w	r3, r7, #20
 80005fe:	4619      	mov	r1, r3
 8000600:	4820      	ldr	r0, [pc, #128]	; (8000684 <MX_GPIO_Init+0x154>)
 8000602:	f001 f835 	bl	8001670 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000606:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800060a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800060c:	2301      	movs	r3, #1
 800060e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000610:	2302      	movs	r3, #2
 8000612:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000614:	2300      	movs	r3, #0
 8000616:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000618:	f107 0314 	add.w	r3, r7, #20
 800061c:	4619      	mov	r1, r3
 800061e:	4819      	ldr	r0, [pc, #100]	; (8000684 <MX_GPIO_Init+0x154>)
 8000620:	f001 f826 	bl	8001670 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000624:	2301      	movs	r3, #1
 8000626:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000628:	2300      	movs	r3, #0
 800062a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800062c:	2302      	movs	r3, #2
 800062e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000630:	f107 0314 	add.w	r3, r7, #20
 8000634:	4619      	mov	r1, r3
 8000636:	4815      	ldr	r0, [pc, #84]	; (800068c <MX_GPIO_Init+0x15c>)
 8000638:	f001 f81a 	bl	8001670 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800063c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000640:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000642:	2311      	movs	r3, #17
 8000644:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000646:	2301      	movs	r3, #1
 8000648:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064a:	2300      	movs	r3, #0
 800064c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800064e:	f107 0314 	add.w	r3, r7, #20
 8000652:	4619      	mov	r1, r3
 8000654:	480b      	ldr	r0, [pc, #44]	; (8000684 <MX_GPIO_Init+0x154>)
 8000656:	f001 f80b 	bl	8001670 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD1 PD2 PD3 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 800065a:	231e      	movs	r3, #30
 800065c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800065e:	2311      	movs	r3, #17
 8000660:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000662:	2301      	movs	r3, #1
 8000664:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000666:	2300      	movs	r3, #0
 8000668:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800066a:	f107 0314 	add.w	r3, r7, #20
 800066e:	4619      	mov	r1, r3
 8000670:	4805      	ldr	r0, [pc, #20]	; (8000688 <MX_GPIO_Init+0x158>)
 8000672:	f000 fffd 	bl	8001670 <HAL_GPIO_Init>

}
 8000676:	bf00      	nop
 8000678:	3728      	adds	r7, #40	; 0x28
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40023800 	.word	0x40023800
 8000684:	40020800 	.word	0x40020800
 8000688:	40020c00 	.word	0x40020c00
 800068c:	40020000 	.word	0x40020000

08000690 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000694:	f000 fdce 	bl	8001234 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000698:	f000 f84e 	bl	8000738 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800069c:	f7ff ff48 	bl	8000530 <MX_GPIO_Init>
  MX_TIM3_Init();
 80006a0:	f000 fb42 	bl	8000d28 <MX_TIM3_Init>
  MX_TIM4_Init();
 80006a4:	f000 fbd6 	bl	8000e54 <MX_TIM4_Init>
  MX_CRC_Init();
 80006a8:	f7ff ff0c 	bl	80004c4 <MX_CRC_Init>
  MX_USART2_UART_Init();
 80006ac:	f000 fd24 	bl	80010f8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart2, buf, 25);
 80006b0:	2219      	movs	r2, #25
 80006b2:	491c      	ldr	r1, [pc, #112]	; (8000724 <main+0x94>)
 80006b4:	481c      	ldr	r0, [pc, #112]	; (8000728 <main+0x98>)
 80006b6:	f002 fdfe 	bl	80032b6 <HAL_UART_Receive_DMA>

  while (!(GPIOA->IDR & (1 << 0)));
 80006ba:	bf00      	nop
 80006bc:	4b1b      	ldr	r3, [pc, #108]	; (800072c <main+0x9c>)
 80006be:	691b      	ldr	r3, [r3, #16]
 80006c0:	f003 0301 	and.w	r3, r3, #1
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d0f9      	beq.n	80006bc <main+0x2c>
  GPIOC->ODR |= (1 << 15);
 80006c8:	4b19      	ldr	r3, [pc, #100]	; (8000730 <main+0xa0>)
 80006ca:	695b      	ldr	r3, [r3, #20]
 80006cc:	4a18      	ldr	r2, [pc, #96]	; (8000730 <main+0xa0>)
 80006ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006d2:	6153      	str	r3, [r2, #20]
  while (GPIOA->IDR & (1 << 0));
 80006d4:	bf00      	nop
 80006d6:	4b15      	ldr	r3, [pc, #84]	; (800072c <main+0x9c>)
 80006d8:	691b      	ldr	r3, [r3, #16]
 80006da:	f003 0301 	and.w	r3, r3, #1
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d1f9      	bne.n	80006d6 <main+0x46>
  GPIOD->ODR |= 1<<1 | 1<<2 | 1<<3 | 1<<4;
 80006e2:	4b14      	ldr	r3, [pc, #80]	; (8000734 <main+0xa4>)
 80006e4:	695b      	ldr	r3, [r3, #20]
 80006e6:	4a13      	ldr	r2, [pc, #76]	; (8000734 <main+0xa4>)
 80006e8:	f043 031e 	orr.w	r3, r3, #30
 80006ec:	6153      	str	r3, [r2, #20]
  GPIOC->ODR |= 1<<6 | 1<<7 | 1<<8 | 1<<9;
 80006ee:	4b10      	ldr	r3, [pc, #64]	; (8000730 <main+0xa0>)
 80006f0:	695b      	ldr	r3, [r3, #20]
 80006f2:	4a0f      	ldr	r2, [pc, #60]	; (8000730 <main+0xa0>)
 80006f4:	f443 7370 	orr.w	r3, r3, #960	; 0x3c0
 80006f8:	6153      	str	r3, [r2, #20]
  while(1) {
	  test_drive();
 80006fa:	f000 fa63 	bl	8000bc4 <test_drive>
	  if(GPIOA->IDR & 1<<0) {
 80006fe:	4b0b      	ldr	r3, [pc, #44]	; (800072c <main+0x9c>)
 8000700:	691b      	ldr	r3, [r3, #16]
 8000702:	f003 0301 	and.w	r3, r3, #1
 8000706:	2b00      	cmp	r3, #0
 8000708:	d0f7      	beq.n	80006fa <main+0x6a>
		  GPIOC->ODR &= ~(1<<15);
 800070a:	4b09      	ldr	r3, [pc, #36]	; (8000730 <main+0xa0>)
 800070c:	695b      	ldr	r3, [r3, #20]
 800070e:	4a08      	ldr	r2, [pc, #32]	; (8000730 <main+0xa0>)
 8000710:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000714:	6153      	str	r3, [r2, #20]
		  GPIOC->ODR |= 1<<14;
 8000716:	4b06      	ldr	r3, [pc, #24]	; (8000730 <main+0xa0>)
 8000718:	695b      	ldr	r3, [r3, #20]
 800071a:	4a05      	ldr	r2, [pc, #20]	; (8000730 <main+0xa0>)
 800071c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000720:	6153      	str	r3, [r2, #20]
		  break;
	  }
  }

  while(1);
 8000722:	e7fe      	b.n	8000722 <main+0x92>
 8000724:	20000034 	.word	0x20000034
 8000728:	20000108 	.word	0x20000108
 800072c:	40020000 	.word	0x40020000
 8000730:	40020800 	.word	0x40020800
 8000734:	40020c00 	.word	0x40020c00

08000738 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b094      	sub	sp, #80	; 0x50
 800073c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073e:	f107 0320 	add.w	r3, r7, #32
 8000742:	2230      	movs	r2, #48	; 0x30
 8000744:	2100      	movs	r1, #0
 8000746:	4618      	mov	r0, r3
 8000748:	f003 fa9c 	bl	8003c84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800074c:	f107 030c 	add.w	r3, r7, #12
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
 8000756:	609a      	str	r2, [r3, #8]
 8000758:	60da      	str	r2, [r3, #12]
 800075a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800075c:	2300      	movs	r3, #0
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	4b21      	ldr	r3, [pc, #132]	; (80007e8 <SystemClock_Config+0xb0>)
 8000762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000764:	4a20      	ldr	r2, [pc, #128]	; (80007e8 <SystemClock_Config+0xb0>)
 8000766:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800076a:	6413      	str	r3, [r2, #64]	; 0x40
 800076c:	4b1e      	ldr	r3, [pc, #120]	; (80007e8 <SystemClock_Config+0xb0>)
 800076e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000770:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000774:	60bb      	str	r3, [r7, #8]
 8000776:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000778:	2300      	movs	r3, #0
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	4b1b      	ldr	r3, [pc, #108]	; (80007ec <SystemClock_Config+0xb4>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a1a      	ldr	r2, [pc, #104]	; (80007ec <SystemClock_Config+0xb4>)
 8000782:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000786:	6013      	str	r3, [r2, #0]
 8000788:	4b18      	ldr	r3, [pc, #96]	; (80007ec <SystemClock_Config+0xb4>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000790:	607b      	str	r3, [r7, #4]
 8000792:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000794:	2301      	movs	r3, #1
 8000796:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000798:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800079c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800079e:	2300      	movs	r3, #0
 80007a0:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a2:	f107 0320 	add.w	r3, r7, #32
 80007a6:	4618      	mov	r0, r3
 80007a8:	f001 f918 	bl	80019dc <HAL_RCC_OscConfig>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80007b2:	f000 fa4f 	bl	8000c54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b6:	230f      	movs	r3, #15
 80007b8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80007ba:	2301      	movs	r3, #1
 80007bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007be:	2300      	movs	r3, #0
 80007c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007c2:	2300      	movs	r3, #0
 80007c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007c6:	2300      	movs	r3, #0
 80007c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007ca:	f107 030c 	add.w	r3, r7, #12
 80007ce:	2100      	movs	r1, #0
 80007d0:	4618      	mov	r0, r3
 80007d2:	f001 fb7b 	bl	8001ecc <HAL_RCC_ClockConfig>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80007dc:	f000 fa3a 	bl	8000c54 <Error_Handler>
  }
}
 80007e0:	bf00      	nop
 80007e2:	3750      	adds	r7, #80	; 0x50
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	40023800 	.word	0x40023800
 80007ec:	40007000 	.word	0x40007000

080007f0 <forward_drive>:

/* USER CODE BEGIN 4 */
static void forward_drive(uint32_t rate) {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
	TIM3->CCR1 = rate;
 80007f8:	4a17      	ldr	r2, [pc, #92]	; (8000858 <forward_drive+0x68>)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	6353      	str	r3, [r2, #52]	; 0x34
	TIM3->CCR2 = rate;
 80007fe:	4a16      	ldr	r2, [pc, #88]	; (8000858 <forward_drive+0x68>)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	6393      	str	r3, [r2, #56]	; 0x38
	TIM3->CCR3 = rate;
 8000804:	4a14      	ldr	r2, [pc, #80]	; (8000858 <forward_drive+0x68>)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	63d3      	str	r3, [r2, #60]	; 0x3c
	TIM3->CCR4 = rate;
 800080a:	4a13      	ldr	r2, [pc, #76]	; (8000858 <forward_drive+0x68>)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	6413      	str	r3, [r2, #64]	; 0x40
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000810:	2100      	movs	r1, #0
 8000812:	4812      	ldr	r0, [pc, #72]	; (800085c <forward_drive+0x6c>)
 8000814:	f001 fde2 	bl	80023dc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000818:	2104      	movs	r1, #4
 800081a:	4810      	ldr	r0, [pc, #64]	; (800085c <forward_drive+0x6c>)
 800081c:	f001 fdde 	bl	80023dc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000820:	2108      	movs	r1, #8
 8000822:	480e      	ldr	r0, [pc, #56]	; (800085c <forward_drive+0x6c>)
 8000824:	f001 fdda 	bl	80023dc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000828:	210c      	movs	r1, #12
 800082a:	480c      	ldr	r0, [pc, #48]	; (800085c <forward_drive+0x6c>)
 800082c:	f001 fdd6 	bl	80023dc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 8000830:	2100      	movs	r1, #0
 8000832:	480b      	ldr	r0, [pc, #44]	; (8000860 <forward_drive+0x70>)
 8000834:	f001 fe9a 	bl	800256c <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2);
 8000838:	2104      	movs	r1, #4
 800083a:	4809      	ldr	r0, [pc, #36]	; (8000860 <forward_drive+0x70>)
 800083c:	f001 fe96 	bl	800256c <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
 8000840:	2108      	movs	r1, #8
 8000842:	4807      	ldr	r0, [pc, #28]	; (8000860 <forward_drive+0x70>)
 8000844:	f001 fe92 	bl	800256c <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_4);
 8000848:	210c      	movs	r1, #12
 800084a:	4805      	ldr	r0, [pc, #20]	; (8000860 <forward_drive+0x70>)
 800084c:	f001 fe8e 	bl	800256c <HAL_TIM_PWM_Stop>
}
 8000850:	bf00      	nop
 8000852:	3708      	adds	r7, #8
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	40000400 	.word	0x40000400
 800085c:	20000078 	.word	0x20000078
 8000860:	200000c0 	.word	0x200000c0

08000864 <backward_drive>:

static void backward_drive(uint32_t rate) {
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
	TIM4->CCR1 = rate;
 800086c:	4a17      	ldr	r2, [pc, #92]	; (80008cc <backward_drive+0x68>)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	6353      	str	r3, [r2, #52]	; 0x34
	TIM4->CCR2 = rate;
 8000872:	4a16      	ldr	r2, [pc, #88]	; (80008cc <backward_drive+0x68>)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	6393      	str	r3, [r2, #56]	; 0x38
	TIM4->CCR3 = rate;
 8000878:	4a14      	ldr	r2, [pc, #80]	; (80008cc <backward_drive+0x68>)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	63d3      	str	r3, [r2, #60]	; 0x3c
	TIM4->CCR4 = rate;
 800087e:	4a13      	ldr	r2, [pc, #76]	; (80008cc <backward_drive+0x68>)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	6413      	str	r3, [r2, #64]	; 0x40
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000884:	2100      	movs	r1, #0
 8000886:	4812      	ldr	r0, [pc, #72]	; (80008d0 <backward_drive+0x6c>)
 8000888:	f001 fda8 	bl	80023dc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800088c:	2104      	movs	r1, #4
 800088e:	4810      	ldr	r0, [pc, #64]	; (80008d0 <backward_drive+0x6c>)
 8000890:	f001 fda4 	bl	80023dc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000894:	2108      	movs	r1, #8
 8000896:	480e      	ldr	r0, [pc, #56]	; (80008d0 <backward_drive+0x6c>)
 8000898:	f001 fda0 	bl	80023dc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800089c:	210c      	movs	r1, #12
 800089e:	480c      	ldr	r0, [pc, #48]	; (80008d0 <backward_drive+0x6c>)
 80008a0:	f001 fd9c 	bl	80023dc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 80008a4:	2100      	movs	r1, #0
 80008a6:	480b      	ldr	r0, [pc, #44]	; (80008d4 <backward_drive+0x70>)
 80008a8:	f001 fe60 	bl	800256c <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 80008ac:	2104      	movs	r1, #4
 80008ae:	4809      	ldr	r0, [pc, #36]	; (80008d4 <backward_drive+0x70>)
 80008b0:	f001 fe5c 	bl	800256c <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 80008b4:	2108      	movs	r1, #8
 80008b6:	4807      	ldr	r0, [pc, #28]	; (80008d4 <backward_drive+0x70>)
 80008b8:	f001 fe58 	bl	800256c <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 80008bc:	210c      	movs	r1, #12
 80008be:	4805      	ldr	r0, [pc, #20]	; (80008d4 <backward_drive+0x70>)
 80008c0:	f001 fe54 	bl	800256c <HAL_TIM_PWM_Stop>
}
 80008c4:	bf00      	nop
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40000800 	.word	0x40000800
 80008d0:	200000c0 	.word	0x200000c0
 80008d4:	20000078 	.word	0x20000078

080008d8 <HAL_UART_RxCpltCallback>:
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_4);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]

	if (buf[0] == 0x0F) {
 80008e0:	4b94      	ldr	r3, [pc, #592]	; (8000b34 <HAL_UART_RxCpltCallback+0x25c>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	2b0f      	cmp	r3, #15
 80008e6:	f040 8160 	bne.w	8000baa <HAL_UART_RxCpltCallback+0x2d2>
//	if (1) {
		count_4++;
 80008ea:	4b93      	ldr	r3, [pc, #588]	; (8000b38 <HAL_UART_RxCpltCallback+0x260>)
 80008ec:	881b      	ldrh	r3, [r3, #0]
 80008ee:	3301      	adds	r3, #1
 80008f0:	b29a      	uxth	r2, r3
 80008f2:	4b91      	ldr	r3, [pc, #580]	; (8000b38 <HAL_UART_RxCpltCallback+0x260>)
 80008f4:	801a      	strh	r2, [r3, #0]
		CH[0] = (buf[1] >> 0 | (buf[2] << 8)) & 0x07FF;
 80008f6:	4b8f      	ldr	r3, [pc, #572]	; (8000b34 <HAL_UART_RxCpltCallback+0x25c>)
 80008f8:	785b      	ldrb	r3, [r3, #1]
 80008fa:	b21a      	sxth	r2, r3
 80008fc:	4b8d      	ldr	r3, [pc, #564]	; (8000b34 <HAL_UART_RxCpltCallback+0x25c>)
 80008fe:	789b      	ldrb	r3, [r3, #2]
 8000900:	021b      	lsls	r3, r3, #8
 8000902:	b21b      	sxth	r3, r3
 8000904:	4313      	orrs	r3, r2
 8000906:	b21b      	sxth	r3, r3
 8000908:	b29b      	uxth	r3, r3
 800090a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800090e:	b29a      	uxth	r2, r3
 8000910:	4b8a      	ldr	r3, [pc, #552]	; (8000b3c <HAL_UART_RxCpltCallback+0x264>)
 8000912:	801a      	strh	r2, [r3, #0]
		CH[1] = (buf[2] >> 3 | (buf[3] << 5)) & 0x07FF;
 8000914:	4b87      	ldr	r3, [pc, #540]	; (8000b34 <HAL_UART_RxCpltCallback+0x25c>)
 8000916:	789b      	ldrb	r3, [r3, #2]
 8000918:	08db      	lsrs	r3, r3, #3
 800091a:	b2db      	uxtb	r3, r3
 800091c:	b21a      	sxth	r2, r3
 800091e:	4b85      	ldr	r3, [pc, #532]	; (8000b34 <HAL_UART_RxCpltCallback+0x25c>)
 8000920:	78db      	ldrb	r3, [r3, #3]
 8000922:	015b      	lsls	r3, r3, #5
 8000924:	b21b      	sxth	r3, r3
 8000926:	4313      	orrs	r3, r2
 8000928:	b21b      	sxth	r3, r3
 800092a:	b29b      	uxth	r3, r3
 800092c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000930:	b29a      	uxth	r2, r3
 8000932:	4b82      	ldr	r3, [pc, #520]	; (8000b3c <HAL_UART_RxCpltCallback+0x264>)
 8000934:	805a      	strh	r2, [r3, #2]
		CH[2] = (buf[3] >> 6 | (buf[4] << 2) | buf[5] << 10) & 0x07FF;
 8000936:	4b7f      	ldr	r3, [pc, #508]	; (8000b34 <HAL_UART_RxCpltCallback+0x25c>)
 8000938:	78db      	ldrb	r3, [r3, #3]
 800093a:	099b      	lsrs	r3, r3, #6
 800093c:	b2db      	uxtb	r3, r3
 800093e:	b21a      	sxth	r2, r3
 8000940:	4b7c      	ldr	r3, [pc, #496]	; (8000b34 <HAL_UART_RxCpltCallback+0x25c>)
 8000942:	791b      	ldrb	r3, [r3, #4]
 8000944:	009b      	lsls	r3, r3, #2
 8000946:	b21b      	sxth	r3, r3
 8000948:	4313      	orrs	r3, r2
 800094a:	b21a      	sxth	r2, r3
 800094c:	4b79      	ldr	r3, [pc, #484]	; (8000b34 <HAL_UART_RxCpltCallback+0x25c>)
 800094e:	795b      	ldrb	r3, [r3, #5]
 8000950:	029b      	lsls	r3, r3, #10
 8000952:	b21b      	sxth	r3, r3
 8000954:	4313      	orrs	r3, r2
 8000956:	b21b      	sxth	r3, r3
 8000958:	b29b      	uxth	r3, r3
 800095a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800095e:	b29a      	uxth	r2, r3
 8000960:	4b76      	ldr	r3, [pc, #472]	; (8000b3c <HAL_UART_RxCpltCallback+0x264>)
 8000962:	809a      	strh	r2, [r3, #4]
		CH[3] = (buf[5] >> 1 | (buf[6] << 7)) & 0x07FF;
 8000964:	4b73      	ldr	r3, [pc, #460]	; (8000b34 <HAL_UART_RxCpltCallback+0x25c>)
 8000966:	795b      	ldrb	r3, [r3, #5]
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	b2db      	uxtb	r3, r3
 800096c:	b21a      	sxth	r2, r3
 800096e:	4b71      	ldr	r3, [pc, #452]	; (8000b34 <HAL_UART_RxCpltCallback+0x25c>)
 8000970:	799b      	ldrb	r3, [r3, #6]
 8000972:	01db      	lsls	r3, r3, #7
 8000974:	b21b      	sxth	r3, r3
 8000976:	4313      	orrs	r3, r2
 8000978:	b21b      	sxth	r3, r3
 800097a:	b29b      	uxth	r3, r3
 800097c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000980:	b29a      	uxth	r2, r3
 8000982:	4b6e      	ldr	r3, [pc, #440]	; (8000b3c <HAL_UART_RxCpltCallback+0x264>)
 8000984:	80da      	strh	r2, [r3, #6]
		CH[4] = (buf[6] >> 4 | (buf[7] << 4)) & 0x07FF;
 8000986:	4b6b      	ldr	r3, [pc, #428]	; (8000b34 <HAL_UART_RxCpltCallback+0x25c>)
 8000988:	799b      	ldrb	r3, [r3, #6]
 800098a:	091b      	lsrs	r3, r3, #4
 800098c:	b2db      	uxtb	r3, r3
 800098e:	b21a      	sxth	r2, r3
 8000990:	4b68      	ldr	r3, [pc, #416]	; (8000b34 <HAL_UART_RxCpltCallback+0x25c>)
 8000992:	79db      	ldrb	r3, [r3, #7]
 8000994:	011b      	lsls	r3, r3, #4
 8000996:	b21b      	sxth	r3, r3
 8000998:	4313      	orrs	r3, r2
 800099a:	b21b      	sxth	r3, r3
 800099c:	b29b      	uxth	r3, r3
 800099e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80009a2:	b29a      	uxth	r2, r3
 80009a4:	4b65      	ldr	r3, [pc, #404]	; (8000b3c <HAL_UART_RxCpltCallback+0x264>)
 80009a6:	811a      	strh	r2, [r3, #8]
		CH[5] = (buf[7] >> 7 | (buf[8] << 1) | buf[9] << 9) & 0x07FF;
 80009a8:	4b62      	ldr	r3, [pc, #392]	; (8000b34 <HAL_UART_RxCpltCallback+0x25c>)
 80009aa:	79db      	ldrb	r3, [r3, #7]
 80009ac:	09db      	lsrs	r3, r3, #7
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	b21a      	sxth	r2, r3
 80009b2:	4b60      	ldr	r3, [pc, #384]	; (8000b34 <HAL_UART_RxCpltCallback+0x25c>)
 80009b4:	7a1b      	ldrb	r3, [r3, #8]
 80009b6:	005b      	lsls	r3, r3, #1
 80009b8:	b21b      	sxth	r3, r3
 80009ba:	4313      	orrs	r3, r2
 80009bc:	b21a      	sxth	r2, r3
 80009be:	4b5d      	ldr	r3, [pc, #372]	; (8000b34 <HAL_UART_RxCpltCallback+0x25c>)
 80009c0:	7a5b      	ldrb	r3, [r3, #9]
 80009c2:	025b      	lsls	r3, r3, #9
 80009c4:	b21b      	sxth	r3, r3
 80009c6:	4313      	orrs	r3, r2
 80009c8:	b21b      	sxth	r3, r3
 80009ca:	b29b      	uxth	r3, r3
 80009cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80009d0:	b29a      	uxth	r2, r3
 80009d2:	4b5a      	ldr	r3, [pc, #360]	; (8000b3c <HAL_UART_RxCpltCallback+0x264>)
 80009d4:	815a      	strh	r2, [r3, #10]
		CH[6] = (buf[9] >> 2 | (buf[10] << 6)) & 0x07FF;
 80009d6:	4b57      	ldr	r3, [pc, #348]	; (8000b34 <HAL_UART_RxCpltCallback+0x25c>)
 80009d8:	7a5b      	ldrb	r3, [r3, #9]
 80009da:	089b      	lsrs	r3, r3, #2
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	b21a      	sxth	r2, r3
 80009e0:	4b54      	ldr	r3, [pc, #336]	; (8000b34 <HAL_UART_RxCpltCallback+0x25c>)
 80009e2:	7a9b      	ldrb	r3, [r3, #10]
 80009e4:	019b      	lsls	r3, r3, #6
 80009e6:	b21b      	sxth	r3, r3
 80009e8:	4313      	orrs	r3, r2
 80009ea:	b21b      	sxth	r3, r3
 80009ec:	b29b      	uxth	r3, r3
 80009ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80009f2:	b29a      	uxth	r2, r3
 80009f4:	4b51      	ldr	r3, [pc, #324]	; (8000b3c <HAL_UART_RxCpltCallback+0x264>)
 80009f6:	819a      	strh	r2, [r3, #12]
		CH[7] = (buf[10] >> 5 | (buf[11] << 3)) & 0x07FF;
 80009f8:	4b4e      	ldr	r3, [pc, #312]	; (8000b34 <HAL_UART_RxCpltCallback+0x25c>)
 80009fa:	7a9b      	ldrb	r3, [r3, #10]
 80009fc:	095b      	lsrs	r3, r3, #5
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	b21a      	sxth	r2, r3
 8000a02:	4b4c      	ldr	r3, [pc, #304]	; (8000b34 <HAL_UART_RxCpltCallback+0x25c>)
 8000a04:	7adb      	ldrb	r3, [r3, #11]
 8000a06:	00db      	lsls	r3, r3, #3
 8000a08:	b21b      	sxth	r3, r3
 8000a0a:	4313      	orrs	r3, r2
 8000a0c:	b21b      	sxth	r3, r3
 8000a0e:	b29b      	uxth	r3, r3
 8000a10:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000a14:	b29a      	uxth	r2, r3
 8000a16:	4b49      	ldr	r3, [pc, #292]	; (8000b3c <HAL_UART_RxCpltCallback+0x264>)
 8000a18:	81da      	strh	r2, [r3, #14]
		CH[8] = (buf[12] << 0 | (buf[13] << 8)) & 0x07FF;
 8000a1a:	4b46      	ldr	r3, [pc, #280]	; (8000b34 <HAL_UART_RxCpltCallback+0x25c>)
 8000a1c:	7b1b      	ldrb	r3, [r3, #12]
 8000a1e:	b21a      	sxth	r2, r3
 8000a20:	4b44      	ldr	r3, [pc, #272]	; (8000b34 <HAL_UART_RxCpltCallback+0x25c>)
 8000a22:	7b5b      	ldrb	r3, [r3, #13]
 8000a24:	021b      	lsls	r3, r3, #8
 8000a26:	b21b      	sxth	r3, r3
 8000a28:	4313      	orrs	r3, r2
 8000a2a:	b21b      	sxth	r3, r3
 8000a2c:	b29b      	uxth	r3, r3
 8000a2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000a32:	b29a      	uxth	r2, r3
 8000a34:	4b41      	ldr	r3, [pc, #260]	; (8000b3c <HAL_UART_RxCpltCallback+0x264>)
 8000a36:	821a      	strh	r2, [r3, #16]
		CH[9] = (buf[13] >> 3 | (buf[14] << 5)) & 0x07FF;
 8000a38:	4b3e      	ldr	r3, [pc, #248]	; (8000b34 <HAL_UART_RxCpltCallback+0x25c>)
 8000a3a:	7b5b      	ldrb	r3, [r3, #13]
 8000a3c:	08db      	lsrs	r3, r3, #3
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	b21a      	sxth	r2, r3
 8000a42:	4b3c      	ldr	r3, [pc, #240]	; (8000b34 <HAL_UART_RxCpltCallback+0x25c>)
 8000a44:	7b9b      	ldrb	r3, [r3, #14]
 8000a46:	015b      	lsls	r3, r3, #5
 8000a48:	b21b      	sxth	r3, r3
 8000a4a:	4313      	orrs	r3, r2
 8000a4c:	b21b      	sxth	r3, r3
 8000a4e:	b29b      	uxth	r3, r3
 8000a50:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000a54:	b29a      	uxth	r2, r3
 8000a56:	4b39      	ldr	r3, [pc, #228]	; (8000b3c <HAL_UART_RxCpltCallback+0x264>)
 8000a58:	825a      	strh	r2, [r3, #18]
		CH[10] = (buf[14] >> 6 | (buf[15] << 2) | buf[16] << 10) & 0x07FF;
 8000a5a:	4b36      	ldr	r3, [pc, #216]	; (8000b34 <HAL_UART_RxCpltCallback+0x25c>)
 8000a5c:	7b9b      	ldrb	r3, [r3, #14]
 8000a5e:	099b      	lsrs	r3, r3, #6
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	b21a      	sxth	r2, r3
 8000a64:	4b33      	ldr	r3, [pc, #204]	; (8000b34 <HAL_UART_RxCpltCallback+0x25c>)
 8000a66:	7bdb      	ldrb	r3, [r3, #15]
 8000a68:	009b      	lsls	r3, r3, #2
 8000a6a:	b21b      	sxth	r3, r3
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	b21a      	sxth	r2, r3
 8000a70:	4b30      	ldr	r3, [pc, #192]	; (8000b34 <HAL_UART_RxCpltCallback+0x25c>)
 8000a72:	7c1b      	ldrb	r3, [r3, #16]
 8000a74:	029b      	lsls	r3, r3, #10
 8000a76:	b21b      	sxth	r3, r3
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	b21b      	sxth	r3, r3
 8000a7c:	b29b      	uxth	r3, r3
 8000a7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000a82:	b29a      	uxth	r2, r3
 8000a84:	4b2d      	ldr	r3, [pc, #180]	; (8000b3c <HAL_UART_RxCpltCallback+0x264>)
 8000a86:	829a      	strh	r2, [r3, #20]
		CH[11] = (buf[16] >> 1 | (buf[17] << 7)) & 0x07FF;
 8000a88:	4b2a      	ldr	r3, [pc, #168]	; (8000b34 <HAL_UART_RxCpltCallback+0x25c>)
 8000a8a:	7c1b      	ldrb	r3, [r3, #16]
 8000a8c:	085b      	lsrs	r3, r3, #1
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	b21a      	sxth	r2, r3
 8000a92:	4b28      	ldr	r3, [pc, #160]	; (8000b34 <HAL_UART_RxCpltCallback+0x25c>)
 8000a94:	7c5b      	ldrb	r3, [r3, #17]
 8000a96:	01db      	lsls	r3, r3, #7
 8000a98:	b21b      	sxth	r3, r3
 8000a9a:	4313      	orrs	r3, r2
 8000a9c:	b21b      	sxth	r3, r3
 8000a9e:	b29b      	uxth	r3, r3
 8000aa0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000aa4:	b29a      	uxth	r2, r3
 8000aa6:	4b25      	ldr	r3, [pc, #148]	; (8000b3c <HAL_UART_RxCpltCallback+0x264>)
 8000aa8:	82da      	strh	r2, [r3, #22]
		CH[12] = (buf[17] >> 4 | (buf[18] << 4)) & 0x07FF;
 8000aaa:	4b22      	ldr	r3, [pc, #136]	; (8000b34 <HAL_UART_RxCpltCallback+0x25c>)
 8000aac:	7c5b      	ldrb	r3, [r3, #17]
 8000aae:	091b      	lsrs	r3, r3, #4
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	b21a      	sxth	r2, r3
 8000ab4:	4b1f      	ldr	r3, [pc, #124]	; (8000b34 <HAL_UART_RxCpltCallback+0x25c>)
 8000ab6:	7c9b      	ldrb	r3, [r3, #18]
 8000ab8:	011b      	lsls	r3, r3, #4
 8000aba:	b21b      	sxth	r3, r3
 8000abc:	4313      	orrs	r3, r2
 8000abe:	b21b      	sxth	r3, r3
 8000ac0:	b29b      	uxth	r3, r3
 8000ac2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000ac6:	b29a      	uxth	r2, r3
 8000ac8:	4b1c      	ldr	r3, [pc, #112]	; (8000b3c <HAL_UART_RxCpltCallback+0x264>)
 8000aca:	831a      	strh	r2, [r3, #24]
		CH[13] = (buf[18] >> 7 | (buf[19] << 1) | buf[20] << 9) & 0x07FF;
 8000acc:	4b19      	ldr	r3, [pc, #100]	; (8000b34 <HAL_UART_RxCpltCallback+0x25c>)
 8000ace:	7c9b      	ldrb	r3, [r3, #18]
 8000ad0:	09db      	lsrs	r3, r3, #7
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	b21a      	sxth	r2, r3
 8000ad6:	4b17      	ldr	r3, [pc, #92]	; (8000b34 <HAL_UART_RxCpltCallback+0x25c>)
 8000ad8:	7cdb      	ldrb	r3, [r3, #19]
 8000ada:	005b      	lsls	r3, r3, #1
 8000adc:	b21b      	sxth	r3, r3
 8000ade:	4313      	orrs	r3, r2
 8000ae0:	b21a      	sxth	r2, r3
 8000ae2:	4b14      	ldr	r3, [pc, #80]	; (8000b34 <HAL_UART_RxCpltCallback+0x25c>)
 8000ae4:	7d1b      	ldrb	r3, [r3, #20]
 8000ae6:	025b      	lsls	r3, r3, #9
 8000ae8:	b21b      	sxth	r3, r3
 8000aea:	4313      	orrs	r3, r2
 8000aec:	b21b      	sxth	r3, r3
 8000aee:	b29b      	uxth	r3, r3
 8000af0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000af4:	b29a      	uxth	r2, r3
 8000af6:	4b11      	ldr	r3, [pc, #68]	; (8000b3c <HAL_UART_RxCpltCallback+0x264>)
 8000af8:	835a      	strh	r2, [r3, #26]
		CH[14] = (buf[20] >> 2 | (buf[21] << 6)) & 0x07FF;
 8000afa:	4b0e      	ldr	r3, [pc, #56]	; (8000b34 <HAL_UART_RxCpltCallback+0x25c>)
 8000afc:	7d1b      	ldrb	r3, [r3, #20]
 8000afe:	089b      	lsrs	r3, r3, #2
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	b21a      	sxth	r2, r3
 8000b04:	4b0b      	ldr	r3, [pc, #44]	; (8000b34 <HAL_UART_RxCpltCallback+0x25c>)
 8000b06:	7d5b      	ldrb	r3, [r3, #21]
 8000b08:	019b      	lsls	r3, r3, #6
 8000b0a:	b21b      	sxth	r3, r3
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	b21b      	sxth	r3, r3
 8000b10:	b29b      	uxth	r3, r3
 8000b12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000b16:	b29a      	uxth	r2, r3
 8000b18:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <HAL_UART_RxCpltCallback+0x264>)
 8000b1a:	839a      	strh	r2, [r3, #28]
		CH[15] = (buf[21] >> 5 | (buf[22] << 3)) & 0x07FF;
 8000b1c:	4b05      	ldr	r3, [pc, #20]	; (8000b34 <HAL_UART_RxCpltCallback+0x25c>)
 8000b1e:	7d5b      	ldrb	r3, [r3, #21]
 8000b20:	095b      	lsrs	r3, r3, #5
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	b21a      	sxth	r2, r3
 8000b26:	4b03      	ldr	r3, [pc, #12]	; (8000b34 <HAL_UART_RxCpltCallback+0x25c>)
 8000b28:	7d9b      	ldrb	r3, [r3, #22]
 8000b2a:	00db      	lsls	r3, r3, #3
 8000b2c:	b21b      	sxth	r3, r3
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	b21b      	sxth	r3, r3
 8000b32:	e005      	b.n	8000b40 <HAL_UART_RxCpltCallback+0x268>
 8000b34:	20000034 	.word	0x20000034
 8000b38:	20000074 	.word	0x20000074
 8000b3c:	20000050 	.word	0x20000050
 8000b40:	b29b      	uxth	r3, r3
 8000b42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000b46:	b29a      	uxth	r2, r3
 8000b48:	4b1b      	ldr	r3, [pc, #108]	; (8000bb8 <HAL_UART_RxCpltCallback+0x2e0>)
 8000b4a:	83da      	strh	r2, [r3, #30]

		if (buf[23] & (1 << 0)) {
 8000b4c:	4b1b      	ldr	r3, [pc, #108]	; (8000bbc <HAL_UART_RxCpltCallback+0x2e4>)
 8000b4e:	7ddb      	ldrb	r3, [r3, #23]
 8000b50:	f003 0301 	and.w	r3, r3, #1
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d003      	beq.n	8000b60 <HAL_UART_RxCpltCallback+0x288>
			CH[16] = 1;
 8000b58:	4b17      	ldr	r3, [pc, #92]	; (8000bb8 <HAL_UART_RxCpltCallback+0x2e0>)
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	841a      	strh	r2, [r3, #32]
 8000b5e:	e002      	b.n	8000b66 <HAL_UART_RxCpltCallback+0x28e>
		} else {
			CH[16] = 0;
 8000b60:	4b15      	ldr	r3, [pc, #84]	; (8000bb8 <HAL_UART_RxCpltCallback+0x2e0>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	841a      	strh	r2, [r3, #32]
		}

		if (buf[23] & (1 << 1)) {
 8000b66:	4b15      	ldr	r3, [pc, #84]	; (8000bbc <HAL_UART_RxCpltCallback+0x2e4>)
 8000b68:	7ddb      	ldrb	r3, [r3, #23]
 8000b6a:	f003 0302 	and.w	r3, r3, #2
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d003      	beq.n	8000b7a <HAL_UART_RxCpltCallback+0x2a2>
			CH[17] = 1;
 8000b72:	4b11      	ldr	r3, [pc, #68]	; (8000bb8 <HAL_UART_RxCpltCallback+0x2e0>)
 8000b74:	2201      	movs	r2, #1
 8000b76:	845a      	strh	r2, [r3, #34]	; 0x22
 8000b78:	e002      	b.n	8000b80 <HAL_UART_RxCpltCallback+0x2a8>
		} else {
			CH[17] = 0;
 8000b7a:	4b0f      	ldr	r3, [pc, #60]	; (8000bb8 <HAL_UART_RxCpltCallback+0x2e0>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	845a      	strh	r2, [r3, #34]	; 0x22
		}

		// Failsafe
		failsafe_status = SBUS_SIGNAL_OK;
 8000b80:	4b0f      	ldr	r3, [pc, #60]	; (8000bc0 <HAL_UART_RxCpltCallback+0x2e8>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	801a      	strh	r2, [r3, #0]
		if (buf[23] & (1 << 2)) {
 8000b86:	4b0d      	ldr	r3, [pc, #52]	; (8000bbc <HAL_UART_RxCpltCallback+0x2e4>)
 8000b88:	7ddb      	ldrb	r3, [r3, #23]
 8000b8a:	f003 0304 	and.w	r3, r3, #4
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d002      	beq.n	8000b98 <HAL_UART_RxCpltCallback+0x2c0>
			failsafe_status = SBUS_SIGNAL_LOST;
 8000b92:	4b0b      	ldr	r3, [pc, #44]	; (8000bc0 <HAL_UART_RxCpltCallback+0x2e8>)
 8000b94:	2201      	movs	r2, #1
 8000b96:	801a      	strh	r2, [r3, #0]
		}

		if (buf[23] & (1 << 3)) {
 8000b98:	4b08      	ldr	r3, [pc, #32]	; (8000bbc <HAL_UART_RxCpltCallback+0x2e4>)
 8000b9a:	7ddb      	ldrb	r3, [r3, #23]
 8000b9c:	f003 0308 	and.w	r3, r3, #8
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d002      	beq.n	8000baa <HAL_UART_RxCpltCallback+0x2d2>
			failsafe_status = SBUS_SIGNAL_FAILSAFE;
 8000ba4:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <HAL_UART_RxCpltCallback+0x2e8>)
 8000ba6:	2203      	movs	r2, #3
 8000ba8:	801a      	strh	r2, [r3, #0]
		}

		//	SBUS_footer=buf[24];

	}
}
 8000baa:	bf00      	nop
 8000bac:	370c      	adds	r7, #12
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	20000050 	.word	0x20000050
 8000bbc:	20000034 	.word	0x20000034
 8000bc0:	20000030 	.word	0x20000030

08000bc4 <test_drive>:
    		// nothing
    	}
    }
}

static void test_drive() {
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b084      	sub	sp, #16
 8000bc8:	af00      	add	r7, sp, #0
	for(int i = 0; i < 100; i ++) {
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	e009      	b.n	8000be4 <test_drive+0x20>
		forward_drive(i);
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f7ff fe0c 	bl	80007f0 <forward_drive>
		HAL_Delay(100);
 8000bd8:	2064      	movs	r0, #100	; 0x64
 8000bda:	f000 fb9d 	bl	8001318 <HAL_Delay>
	for(int i = 0; i < 100; i ++) {
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	3301      	adds	r3, #1
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	2b63      	cmp	r3, #99	; 0x63
 8000be8:	ddf2      	ble.n	8000bd0 <test_drive+0xc>
	}
	for(int i = 100; i > 0; i --) {
 8000bea:	2364      	movs	r3, #100	; 0x64
 8000bec:	60bb      	str	r3, [r7, #8]
 8000bee:	e009      	b.n	8000c04 <test_drive+0x40>
		forward_drive(i);
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff fdfc 	bl	80007f0 <forward_drive>
		HAL_Delay(100);
 8000bf8:	2064      	movs	r0, #100	; 0x64
 8000bfa:	f000 fb8d 	bl	8001318 <HAL_Delay>
	for(int i = 100; i > 0; i --) {
 8000bfe:	68bb      	ldr	r3, [r7, #8]
 8000c00:	3b01      	subs	r3, #1
 8000c02:	60bb      	str	r3, [r7, #8]
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	dcf2      	bgt.n	8000bf0 <test_drive+0x2c>
	}
	for(int i = 0; i < 100; i ++) {
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	607b      	str	r3, [r7, #4]
 8000c0e:	e009      	b.n	8000c24 <test_drive+0x60>
		backward_drive(i);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff fe26 	bl	8000864 <backward_drive>
		HAL_Delay(100);
 8000c18:	2064      	movs	r0, #100	; 0x64
 8000c1a:	f000 fb7d 	bl	8001318 <HAL_Delay>
	for(int i = 0; i < 100; i ++) {
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	3301      	adds	r3, #1
 8000c22:	607b      	str	r3, [r7, #4]
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2b63      	cmp	r3, #99	; 0x63
 8000c28:	ddf2      	ble.n	8000c10 <test_drive+0x4c>
	}
	for(int i = 100; i > 0; i --) {
 8000c2a:	2364      	movs	r3, #100	; 0x64
 8000c2c:	603b      	str	r3, [r7, #0]
 8000c2e:	e009      	b.n	8000c44 <test_drive+0x80>
		backward_drive(i);
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	4618      	mov	r0, r3
 8000c34:	f7ff fe16 	bl	8000864 <backward_drive>
		HAL_Delay(100);
 8000c38:	2064      	movs	r0, #100	; 0x64
 8000c3a:	f000 fb6d 	bl	8001318 <HAL_Delay>
	for(int i = 100; i > 0; i --) {
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	3b01      	subs	r3, #1
 8000c42:	603b      	str	r3, [r7, #0]
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	dcf2      	bgt.n	8000c30 <test_drive+0x6c>
	}
}
 8000c4a:	bf00      	nop
 8000c4c:	bf00      	nop
 8000c4e:	3710      	adds	r7, #16
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c58:	b672      	cpsid	i
}
 8000c5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c5c:	e7fe      	b.n	8000c5c <Error_Handler+0x8>
	...

08000c60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	607b      	str	r3, [r7, #4]
 8000c6a:	4b10      	ldr	r3, [pc, #64]	; (8000cac <HAL_MspInit+0x4c>)
 8000c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c6e:	4a0f      	ldr	r2, [pc, #60]	; (8000cac <HAL_MspInit+0x4c>)
 8000c70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c74:	6453      	str	r3, [r2, #68]	; 0x44
 8000c76:	4b0d      	ldr	r3, [pc, #52]	; (8000cac <HAL_MspInit+0x4c>)
 8000c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c7e:	607b      	str	r3, [r7, #4]
 8000c80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	603b      	str	r3, [r7, #0]
 8000c86:	4b09      	ldr	r3, [pc, #36]	; (8000cac <HAL_MspInit+0x4c>)
 8000c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8a:	4a08      	ldr	r2, [pc, #32]	; (8000cac <HAL_MspInit+0x4c>)
 8000c8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c90:	6413      	str	r3, [r2, #64]	; 0x40
 8000c92:	4b06      	ldr	r3, [pc, #24]	; (8000cac <HAL_MspInit+0x4c>)
 8000c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c9a:	603b      	str	r3, [r7, #0]
 8000c9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	40023800 	.word	0x40023800

08000cb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cb4:	e7fe      	b.n	8000cb4 <NMI_Handler+0x4>

08000cb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cba:	e7fe      	b.n	8000cba <HardFault_Handler+0x4>

08000cbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc0:	e7fe      	b.n	8000cc0 <MemManage_Handler+0x4>

08000cc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cc6:	e7fe      	b.n	8000cc6 <BusFault_Handler+0x4>

08000cc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ccc:	e7fe      	b.n	8000ccc <UsageFault_Handler+0x4>

08000cce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr

08000cdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr

08000cea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cea:	b480      	push	{r7}
 8000cec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr

08000cf8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cfc:	f000 faec 	bl	80012d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d00:	bf00      	nop
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <SystemInit+0x20>)
 8000d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d0e:	4a05      	ldr	r2, [pc, #20]	; (8000d24 <SystemInit+0x20>)
 8000d10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	e000ed00 	.word	0xe000ed00

08000d28 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08e      	sub	sp, #56	; 0x38
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	605a      	str	r2, [r3, #4]
 8000d38:	609a      	str	r2, [r3, #8]
 8000d3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d3c:	f107 0320 	add.w	r3, r7, #32
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d46:	1d3b      	adds	r3, r7, #4
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
 8000d52:	611a      	str	r2, [r3, #16]
 8000d54:	615a      	str	r2, [r3, #20]
 8000d56:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d58:	4b3c      	ldr	r3, [pc, #240]	; (8000e4c <MX_TIM3_Init+0x124>)
 8000d5a:	4a3d      	ldr	r2, [pc, #244]	; (8000e50 <MX_TIM3_Init+0x128>)
 8000d5c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 25-1;
 8000d5e:	4b3b      	ldr	r3, [pc, #236]	; (8000e4c <MX_TIM3_Init+0x124>)
 8000d60:	2218      	movs	r2, #24
 8000d62:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d64:	4b39      	ldr	r3, [pc, #228]	; (8000e4c <MX_TIM3_Init+0x124>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8000d6a:	4b38      	ldr	r3, [pc, #224]	; (8000e4c <MX_TIM3_Init+0x124>)
 8000d6c:	2263      	movs	r2, #99	; 0x63
 8000d6e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d70:	4b36      	ldr	r3, [pc, #216]	; (8000e4c <MX_TIM3_Init+0x124>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d76:	4b35      	ldr	r3, [pc, #212]	; (8000e4c <MX_TIM3_Init+0x124>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d7c:	4833      	ldr	r0, [pc, #204]	; (8000e4c <MX_TIM3_Init+0x124>)
 8000d7e:	f001 fa85 	bl	800228c <HAL_TIM_Base_Init>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000d88:	f7ff ff64 	bl	8000c54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d90:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d96:	4619      	mov	r1, r3
 8000d98:	482c      	ldr	r0, [pc, #176]	; (8000e4c <MX_TIM3_Init+0x124>)
 8000d9a:	f001 fd19 	bl	80027d0 <HAL_TIM_ConfigClockSource>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000da4:	f7ff ff56 	bl	8000c54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000da8:	4828      	ldr	r0, [pc, #160]	; (8000e4c <MX_TIM3_Init+0x124>)
 8000daa:	f001 fabe 	bl	800232a <HAL_TIM_PWM_Init>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000db4:	f7ff ff4e 	bl	8000c54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000db8:	2320      	movs	r3, #32
 8000dba:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000dc0:	f107 0320 	add.w	r3, r7, #32
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4821      	ldr	r0, [pc, #132]	; (8000e4c <MX_TIM3_Init+0x124>)
 8000dc8:	f002 f9ac 	bl	8003124 <HAL_TIMEx_MasterConfigSynchronization>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8000dd2:	f7ff ff3f 	bl	8000c54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dd6:	2360      	movs	r3, #96	; 0x60
 8000dd8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dde:	2300      	movs	r3, #0
 8000de0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000de2:	2300      	movs	r3, #0
 8000de4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000de6:	1d3b      	adds	r3, r7, #4
 8000de8:	2200      	movs	r2, #0
 8000dea:	4619      	mov	r1, r3
 8000dec:	4817      	ldr	r0, [pc, #92]	; (8000e4c <MX_TIM3_Init+0x124>)
 8000dee:	f001 fc2d 	bl	800264c <HAL_TIM_PWM_ConfigChannel>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8000df8:	f7ff ff2c 	bl	8000c54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000dfc:	1d3b      	adds	r3, r7, #4
 8000dfe:	2204      	movs	r2, #4
 8000e00:	4619      	mov	r1, r3
 8000e02:	4812      	ldr	r0, [pc, #72]	; (8000e4c <MX_TIM3_Init+0x124>)
 8000e04:	f001 fc22 	bl	800264c <HAL_TIM_PWM_ConfigChannel>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 8000e0e:	f7ff ff21 	bl	8000c54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e12:	1d3b      	adds	r3, r7, #4
 8000e14:	2208      	movs	r2, #8
 8000e16:	4619      	mov	r1, r3
 8000e18:	480c      	ldr	r0, [pc, #48]	; (8000e4c <MX_TIM3_Init+0x124>)
 8000e1a:	f001 fc17 	bl	800264c <HAL_TIM_PWM_ConfigChannel>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_TIM3_Init+0x100>
  {
    Error_Handler();
 8000e24:	f7ff ff16 	bl	8000c54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e28:	1d3b      	adds	r3, r7, #4
 8000e2a:	220c      	movs	r2, #12
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4807      	ldr	r0, [pc, #28]	; (8000e4c <MX_TIM3_Init+0x124>)
 8000e30:	f001 fc0c 	bl	800264c <HAL_TIM_PWM_ConfigChannel>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_TIM3_Init+0x116>
  {
    Error_Handler();
 8000e3a:	f7ff ff0b 	bl	8000c54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000e3e:	4803      	ldr	r0, [pc, #12]	; (8000e4c <MX_TIM3_Init+0x124>)
 8000e40:	f000 f8d8 	bl	8000ff4 <HAL_TIM_MspPostInit>

}
 8000e44:	bf00      	nop
 8000e46:	3738      	adds	r7, #56	; 0x38
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	20000078 	.word	0x20000078
 8000e50:	40000400 	.word	0x40000400

08000e54 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b08e      	sub	sp, #56	; 0x38
 8000e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000e5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	605a      	str	r2, [r3, #4]
 8000e64:	609a      	str	r2, [r3, #8]
 8000e66:	60da      	str	r2, [r3, #12]
 8000e68:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e6a:	f107 031c 	add.w	r3, r7, #28
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e74:	463b      	mov	r3, r7
 8000e76:	2200      	movs	r2, #0
 8000e78:	601a      	str	r2, [r3, #0]
 8000e7a:	605a      	str	r2, [r3, #4]
 8000e7c:	609a      	str	r2, [r3, #8]
 8000e7e:	60da      	str	r2, [r3, #12]
 8000e80:	611a      	str	r2, [r3, #16]
 8000e82:	615a      	str	r2, [r3, #20]
 8000e84:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e86:	4b3d      	ldr	r3, [pc, #244]	; (8000f7c <MX_TIM4_Init+0x128>)
 8000e88:	4a3d      	ldr	r2, [pc, #244]	; (8000f80 <MX_TIM4_Init+0x12c>)
 8000e8a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 25-1;
 8000e8c:	4b3b      	ldr	r3, [pc, #236]	; (8000f7c <MX_TIM4_Init+0x128>)
 8000e8e:	2218      	movs	r2, #24
 8000e90:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e92:	4b3a      	ldr	r3, [pc, #232]	; (8000f7c <MX_TIM4_Init+0x128>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8000e98:	4b38      	ldr	r3, [pc, #224]	; (8000f7c <MX_TIM4_Init+0x128>)
 8000e9a:	2263      	movs	r2, #99	; 0x63
 8000e9c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e9e:	4b37      	ldr	r3, [pc, #220]	; (8000f7c <MX_TIM4_Init+0x128>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ea4:	4b35      	ldr	r3, [pc, #212]	; (8000f7c <MX_TIM4_Init+0x128>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000eaa:	4834      	ldr	r0, [pc, #208]	; (8000f7c <MX_TIM4_Init+0x128>)
 8000eac:	f001 f9ee 	bl	800228c <HAL_TIM_Base_Init>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000eb6:	f7ff fecd 	bl	8000c54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000eba:	4830      	ldr	r0, [pc, #192]	; (8000f7c <MX_TIM4_Init+0x128>)
 8000ebc:	f001 fa35 	bl	800232a <HAL_TIM_PWM_Init>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000ec6:	f7ff fec5 	bl	8000c54 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000eca:	2306      	movs	r3, #6
 8000ecc:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR2;
 8000ece:	2320      	movs	r3, #32
 8000ed0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8000ed2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4828      	ldr	r0, [pc, #160]	; (8000f7c <MX_TIM4_Init+0x128>)
 8000eda:	f001 fd40 	bl	800295e <HAL_TIM_SlaveConfigSynchro>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000ee4:	f7ff feb6 	bl	8000c54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eec:	2300      	movs	r3, #0
 8000eee:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ef0:	f107 031c 	add.w	r3, r7, #28
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4821      	ldr	r0, [pc, #132]	; (8000f7c <MX_TIM4_Init+0x128>)
 8000ef8:	f002 f914 	bl	8003124 <HAL_TIMEx_MasterConfigSynchronization>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000f02:	f7ff fea7 	bl	8000c54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f06:	2360      	movs	r3, #96	; 0x60
 8000f08:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f12:	2300      	movs	r3, #0
 8000f14:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f16:	463b      	mov	r3, r7
 8000f18:	2200      	movs	r2, #0
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4817      	ldr	r0, [pc, #92]	; (8000f7c <MX_TIM4_Init+0x128>)
 8000f1e:	f001 fb95 	bl	800264c <HAL_TIM_PWM_ConfigChannel>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000f28:	f7ff fe94 	bl	8000c54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f2c:	463b      	mov	r3, r7
 8000f2e:	2204      	movs	r2, #4
 8000f30:	4619      	mov	r1, r3
 8000f32:	4812      	ldr	r0, [pc, #72]	; (8000f7c <MX_TIM4_Init+0x128>)
 8000f34:	f001 fb8a 	bl	800264c <HAL_TIM_PWM_ConfigChannel>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 8000f3e:	f7ff fe89 	bl	8000c54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f42:	463b      	mov	r3, r7
 8000f44:	2208      	movs	r2, #8
 8000f46:	4619      	mov	r1, r3
 8000f48:	480c      	ldr	r0, [pc, #48]	; (8000f7c <MX_TIM4_Init+0x128>)
 8000f4a:	f001 fb7f 	bl	800264c <HAL_TIM_PWM_ConfigChannel>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 8000f54:	f7ff fe7e 	bl	8000c54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f58:	463b      	mov	r3, r7
 8000f5a:	220c      	movs	r2, #12
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4807      	ldr	r0, [pc, #28]	; (8000f7c <MX_TIM4_Init+0x128>)
 8000f60:	f001 fb74 	bl	800264c <HAL_TIM_PWM_ConfigChannel>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_TIM4_Init+0x11a>
  {
    Error_Handler();
 8000f6a:	f7ff fe73 	bl	8000c54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000f6e:	4803      	ldr	r0, [pc, #12]	; (8000f7c <MX_TIM4_Init+0x128>)
 8000f70:	f000 f840 	bl	8000ff4 <HAL_TIM_MspPostInit>

}
 8000f74:	bf00      	nop
 8000f76:	3738      	adds	r7, #56	; 0x38
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	200000c0 	.word	0x200000c0
 8000f80:	40000800 	.word	0x40000800

08000f84 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a15      	ldr	r2, [pc, #84]	; (8000fe8 <HAL_TIM_Base_MspInit+0x64>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d10e      	bne.n	8000fb4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	60fb      	str	r3, [r7, #12]
 8000f9a:	4b14      	ldr	r3, [pc, #80]	; (8000fec <HAL_TIM_Base_MspInit+0x68>)
 8000f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9e:	4a13      	ldr	r2, [pc, #76]	; (8000fec <HAL_TIM_Base_MspInit+0x68>)
 8000fa0:	f043 0302 	orr.w	r3, r3, #2
 8000fa4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fa6:	4b11      	ldr	r3, [pc, #68]	; (8000fec <HAL_TIM_Base_MspInit+0x68>)
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000faa:	f003 0302 	and.w	r3, r3, #2
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000fb2:	e012      	b.n	8000fda <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM4)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a0d      	ldr	r2, [pc, #52]	; (8000ff0 <HAL_TIM_Base_MspInit+0x6c>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d10d      	bne.n	8000fda <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60bb      	str	r3, [r7, #8]
 8000fc2:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <HAL_TIM_Base_MspInit+0x68>)
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc6:	4a09      	ldr	r2, [pc, #36]	; (8000fec <HAL_TIM_Base_MspInit+0x68>)
 8000fc8:	f043 0304 	orr.w	r3, r3, #4
 8000fcc:	6413      	str	r3, [r2, #64]	; 0x40
 8000fce:	4b07      	ldr	r3, [pc, #28]	; (8000fec <HAL_TIM_Base_MspInit+0x68>)
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd2:	f003 0304 	and.w	r3, r3, #4
 8000fd6:	60bb      	str	r3, [r7, #8]
 8000fd8:	68bb      	ldr	r3, [r7, #8]
}
 8000fda:	bf00      	nop
 8000fdc:	3714      	adds	r7, #20
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	40000400 	.word	0x40000400
 8000fec:	40023800 	.word	0x40023800
 8000ff0:	40000800 	.word	0x40000800

08000ff4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08a      	sub	sp, #40	; 0x28
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffc:	f107 0314 	add.w	r3, r7, #20
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a33      	ldr	r2, [pc, #204]	; (80010e0 <HAL_TIM_MspPostInit+0xec>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d13c      	bne.n	8001090 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	613b      	str	r3, [r7, #16]
 800101a:	4b32      	ldr	r3, [pc, #200]	; (80010e4 <HAL_TIM_MspPostInit+0xf0>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	4a31      	ldr	r2, [pc, #196]	; (80010e4 <HAL_TIM_MspPostInit+0xf0>)
 8001020:	f043 0301 	orr.w	r3, r3, #1
 8001024:	6313      	str	r3, [r2, #48]	; 0x30
 8001026:	4b2f      	ldr	r3, [pc, #188]	; (80010e4 <HAL_TIM_MspPostInit+0xf0>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	613b      	str	r3, [r7, #16]
 8001030:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	4b2b      	ldr	r3, [pc, #172]	; (80010e4 <HAL_TIM_MspPostInit+0xf0>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	4a2a      	ldr	r2, [pc, #168]	; (80010e4 <HAL_TIM_MspPostInit+0xf0>)
 800103c:	f043 0302 	orr.w	r3, r3, #2
 8001040:	6313      	str	r3, [r2, #48]	; 0x30
 8001042:	4b28      	ldr	r3, [pc, #160]	; (80010e4 <HAL_TIM_MspPostInit+0xf0>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	f003 0302 	and.w	r3, r3, #2
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800104e:	23c0      	movs	r3, #192	; 0xc0
 8001050:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001052:	2312      	movs	r3, #18
 8001054:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001056:	2301      	movs	r3, #1
 8001058:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105a:	2300      	movs	r3, #0
 800105c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800105e:	2302      	movs	r3, #2
 8001060:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001062:	f107 0314 	add.w	r3, r7, #20
 8001066:	4619      	mov	r1, r3
 8001068:	481f      	ldr	r0, [pc, #124]	; (80010e8 <HAL_TIM_MspPostInit+0xf4>)
 800106a:	f000 fb01 	bl	8001670 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800106e:	2303      	movs	r3, #3
 8001070:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001072:	2312      	movs	r3, #18
 8001074:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001076:	2301      	movs	r3, #1
 8001078:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107a:	2300      	movs	r3, #0
 800107c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800107e:	2302      	movs	r3, #2
 8001080:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001082:	f107 0314 	add.w	r3, r7, #20
 8001086:	4619      	mov	r1, r3
 8001088:	4818      	ldr	r0, [pc, #96]	; (80010ec <HAL_TIM_MspPostInit+0xf8>)
 800108a:	f000 faf1 	bl	8001670 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800108e:	e023      	b.n	80010d8 <HAL_TIM_MspPostInit+0xe4>
  else if(timHandle->Instance==TIM4)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a16      	ldr	r2, [pc, #88]	; (80010f0 <HAL_TIM_MspPostInit+0xfc>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d11e      	bne.n	80010d8 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	60bb      	str	r3, [r7, #8]
 800109e:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <HAL_TIM_MspPostInit+0xf0>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	4a10      	ldr	r2, [pc, #64]	; (80010e4 <HAL_TIM_MspPostInit+0xf0>)
 80010a4:	f043 0308 	orr.w	r3, r3, #8
 80010a8:	6313      	str	r3, [r2, #48]	; 0x30
 80010aa:	4b0e      	ldr	r3, [pc, #56]	; (80010e4 <HAL_TIM_MspPostInit+0xf0>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	f003 0308 	and.w	r3, r3, #8
 80010b2:	60bb      	str	r3, [r7, #8]
 80010b4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80010b6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80010ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010bc:	2312      	movs	r3, #18
 80010be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010c0:	2301      	movs	r3, #1
 80010c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c4:	2300      	movs	r3, #0
 80010c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80010c8:	2302      	movs	r3, #2
 80010ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010cc:	f107 0314 	add.w	r3, r7, #20
 80010d0:	4619      	mov	r1, r3
 80010d2:	4808      	ldr	r0, [pc, #32]	; (80010f4 <HAL_TIM_MspPostInit+0x100>)
 80010d4:	f000 facc 	bl	8001670 <HAL_GPIO_Init>
}
 80010d8:	bf00      	nop
 80010da:	3728      	adds	r7, #40	; 0x28
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	40000400 	.word	0x40000400
 80010e4:	40023800 	.word	0x40023800
 80010e8:	40020000 	.word	0x40020000
 80010ec:	40020400 	.word	0x40020400
 80010f0:	40000800 	.word	0x40000800
 80010f4:	40020c00 	.word	0x40020c00

080010f8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010fc:	4b11      	ldr	r3, [pc, #68]	; (8001144 <MX_USART2_UART_Init+0x4c>)
 80010fe:	4a12      	ldr	r2, [pc, #72]	; (8001148 <MX_USART2_UART_Init+0x50>)
 8001100:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 100000;
 8001102:	4b10      	ldr	r3, [pc, #64]	; (8001144 <MX_USART2_UART_Init+0x4c>)
 8001104:	4a11      	ldr	r2, [pc, #68]	; (800114c <MX_USART2_UART_Init+0x54>)
 8001106:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001108:	4b0e      	ldr	r3, [pc, #56]	; (8001144 <MX_USART2_UART_Init+0x4c>)
 800110a:	2200      	movs	r2, #0
 800110c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 800110e:	4b0d      	ldr	r3, [pc, #52]	; (8001144 <MX_USART2_UART_Init+0x4c>)
 8001110:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001114:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001116:	4b0b      	ldr	r3, [pc, #44]	; (8001144 <MX_USART2_UART_Init+0x4c>)
 8001118:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800111c:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 800111e:	4b09      	ldr	r3, [pc, #36]	; (8001144 <MX_USART2_UART_Init+0x4c>)
 8001120:	2204      	movs	r2, #4
 8001122:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001124:	4b07      	ldr	r3, [pc, #28]	; (8001144 <MX_USART2_UART_Init+0x4c>)
 8001126:	2200      	movs	r2, #0
 8001128:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800112a:	4b06      	ldr	r3, [pc, #24]	; (8001144 <MX_USART2_UART_Init+0x4c>)
 800112c:	2200      	movs	r2, #0
 800112e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001130:	4804      	ldr	r0, [pc, #16]	; (8001144 <MX_USART2_UART_Init+0x4c>)
 8001132:	f002 f873 	bl	800321c <HAL_UART_Init>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 800113c:	f7ff fd8a 	bl	8000c54 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001140:	bf00      	nop
 8001142:	bd80      	pop	{r7, pc}
 8001144:	20000108 	.word	0x20000108
 8001148:	40004400 	.word	0x40004400
 800114c:	000186a0 	.word	0x000186a0

08001150 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08a      	sub	sp, #40	; 0x28
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001158:	f107 0314 	add.w	r3, r7, #20
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
 8001166:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a19      	ldr	r2, [pc, #100]	; (80011d4 <HAL_UART_MspInit+0x84>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d12b      	bne.n	80011ca <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	613b      	str	r3, [r7, #16]
 8001176:	4b18      	ldr	r3, [pc, #96]	; (80011d8 <HAL_UART_MspInit+0x88>)
 8001178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117a:	4a17      	ldr	r2, [pc, #92]	; (80011d8 <HAL_UART_MspInit+0x88>)
 800117c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001180:	6413      	str	r3, [r2, #64]	; 0x40
 8001182:	4b15      	ldr	r3, [pc, #84]	; (80011d8 <HAL_UART_MspInit+0x88>)
 8001184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800118a:	613b      	str	r3, [r7, #16]
 800118c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <HAL_UART_MspInit+0x88>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	4a10      	ldr	r2, [pc, #64]	; (80011d8 <HAL_UART_MspInit+0x88>)
 8001198:	f043 0301 	orr.w	r3, r3, #1
 800119c:	6313      	str	r3, [r2, #48]	; 0x30
 800119e:	4b0e      	ldr	r3, [pc, #56]	; (80011d8 <HAL_UART_MspInit+0x88>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80011aa:	230c      	movs	r3, #12
 80011ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ae:	2302      	movs	r3, #2
 80011b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011b2:	2302      	movs	r3, #2
 80011b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b6:	2303      	movs	r3, #3
 80011b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011ba:	2307      	movs	r3, #7
 80011bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011be:	f107 0314 	add.w	r3, r7, #20
 80011c2:	4619      	mov	r1, r3
 80011c4:	4805      	ldr	r0, [pc, #20]	; (80011dc <HAL_UART_MspInit+0x8c>)
 80011c6:	f000 fa53 	bl	8001670 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80011ca:	bf00      	nop
 80011cc:	3728      	adds	r7, #40	; 0x28
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40004400 	.word	0x40004400
 80011d8:	40023800 	.word	0x40023800
 80011dc:	40020000 	.word	0x40020000

080011e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80011e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001218 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011e4:	480d      	ldr	r0, [pc, #52]	; (800121c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011e6:	490e      	ldr	r1, [pc, #56]	; (8001220 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011e8:	4a0e      	ldr	r2, [pc, #56]	; (8001224 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011ec:	e002      	b.n	80011f4 <LoopCopyDataInit>

080011ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011f2:	3304      	adds	r3, #4

080011f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011f8:	d3f9      	bcc.n	80011ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011fa:	4a0b      	ldr	r2, [pc, #44]	; (8001228 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011fc:	4c0b      	ldr	r4, [pc, #44]	; (800122c <LoopFillZerobss+0x26>)
  movs r3, #0
 80011fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001200:	e001      	b.n	8001206 <LoopFillZerobss>

08001202 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001202:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001204:	3204      	adds	r2, #4

08001206 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001206:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001208:	d3fb      	bcc.n	8001202 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800120a:	f7ff fd7b 	bl	8000d04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800120e:	f002 fd41 	bl	8003c94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001212:	f7ff fa3d 	bl	8000690 <main>
  bx  lr    
 8001216:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001218:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800121c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001220:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001224:	08003d1c 	.word	0x08003d1c
  ldr r2, =_sbss
 8001228:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800122c:	20000150 	.word	0x20000150

08001230 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001230:	e7fe      	b.n	8001230 <ADC_IRQHandler>
	...

08001234 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001238:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <HAL_Init+0x40>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a0d      	ldr	r2, [pc, #52]	; (8001274 <HAL_Init+0x40>)
 800123e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001242:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001244:	4b0b      	ldr	r3, [pc, #44]	; (8001274 <HAL_Init+0x40>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a0a      	ldr	r2, [pc, #40]	; (8001274 <HAL_Init+0x40>)
 800124a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800124e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001250:	4b08      	ldr	r3, [pc, #32]	; (8001274 <HAL_Init+0x40>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a07      	ldr	r2, [pc, #28]	; (8001274 <HAL_Init+0x40>)
 8001256:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800125a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800125c:	2003      	movs	r0, #3
 800125e:	f000 f931 	bl	80014c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001262:	200f      	movs	r0, #15
 8001264:	f000 f808 	bl	8001278 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001268:	f7ff fcfa 	bl	8000c60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800126c:	2300      	movs	r3, #0
}
 800126e:	4618      	mov	r0, r3
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	40023c00 	.word	0x40023c00

08001278 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001280:	4b12      	ldr	r3, [pc, #72]	; (80012cc <HAL_InitTick+0x54>)
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <HAL_InitTick+0x58>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	4619      	mov	r1, r3
 800128a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800128e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001292:	fbb2 f3f3 	udiv	r3, r2, r3
 8001296:	4618      	mov	r0, r3
 8001298:	f000 f93b 	bl	8001512 <HAL_SYSTICK_Config>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e00e      	b.n	80012c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2b0f      	cmp	r3, #15
 80012aa:	d80a      	bhi.n	80012c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012ac:	2200      	movs	r2, #0
 80012ae:	6879      	ldr	r1, [r7, #4]
 80012b0:	f04f 30ff 	mov.w	r0, #4294967295
 80012b4:	f000 f911 	bl	80014da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012b8:	4a06      	ldr	r2, [pc, #24]	; (80012d4 <HAL_InitTick+0x5c>)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012be:	2300      	movs	r3, #0
 80012c0:	e000      	b.n	80012c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	20000000 	.word	0x20000000
 80012d0:	20000008 	.word	0x20000008
 80012d4:	20000004 	.word	0x20000004

080012d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012dc:	4b06      	ldr	r3, [pc, #24]	; (80012f8 <HAL_IncTick+0x20>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	461a      	mov	r2, r3
 80012e2:	4b06      	ldr	r3, [pc, #24]	; (80012fc <HAL_IncTick+0x24>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4413      	add	r3, r2
 80012e8:	4a04      	ldr	r2, [pc, #16]	; (80012fc <HAL_IncTick+0x24>)
 80012ea:	6013      	str	r3, [r2, #0]
}
 80012ec:	bf00      	nop
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	20000008 	.word	0x20000008
 80012fc:	2000014c 	.word	0x2000014c

08001300 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  return uwTick;
 8001304:	4b03      	ldr	r3, [pc, #12]	; (8001314 <HAL_GetTick+0x14>)
 8001306:	681b      	ldr	r3, [r3, #0]
}
 8001308:	4618      	mov	r0, r3
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	2000014c 	.word	0x2000014c

08001318 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001320:	f7ff ffee 	bl	8001300 <HAL_GetTick>
 8001324:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001330:	d005      	beq.n	800133e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001332:	4b0a      	ldr	r3, [pc, #40]	; (800135c <HAL_Delay+0x44>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	461a      	mov	r2, r3
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	4413      	add	r3, r2
 800133c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800133e:	bf00      	nop
 8001340:	f7ff ffde 	bl	8001300 <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	68fa      	ldr	r2, [r7, #12]
 800134c:	429a      	cmp	r2, r3
 800134e:	d8f7      	bhi.n	8001340 <HAL_Delay+0x28>
  {
  }
}
 8001350:	bf00      	nop
 8001352:	bf00      	nop
 8001354:	3710      	adds	r7, #16
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	20000008 	.word	0x20000008

08001360 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	f003 0307 	and.w	r3, r3, #7
 800136e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001370:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001376:	68ba      	ldr	r2, [r7, #8]
 8001378:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800137c:	4013      	ands	r3, r2
 800137e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001388:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800138c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001390:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001392:	4a04      	ldr	r2, [pc, #16]	; (80013a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	60d3      	str	r3, [r2, #12]
}
 8001398:	bf00      	nop
 800139a:	3714      	adds	r7, #20
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr
 80013a4:	e000ed00 	.word	0xe000ed00

080013a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013ac:	4b04      	ldr	r3, [pc, #16]	; (80013c0 <__NVIC_GetPriorityGrouping+0x18>)
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	0a1b      	lsrs	r3, r3, #8
 80013b2:	f003 0307 	and.w	r3, r3, #7
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	e000ed00 	.word	0xe000ed00

080013c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	6039      	str	r1, [r7, #0]
 80013ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	db0a      	blt.n	80013ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	b2da      	uxtb	r2, r3
 80013dc:	490c      	ldr	r1, [pc, #48]	; (8001410 <__NVIC_SetPriority+0x4c>)
 80013de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e2:	0112      	lsls	r2, r2, #4
 80013e4:	b2d2      	uxtb	r2, r2
 80013e6:	440b      	add	r3, r1
 80013e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013ec:	e00a      	b.n	8001404 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	b2da      	uxtb	r2, r3
 80013f2:	4908      	ldr	r1, [pc, #32]	; (8001414 <__NVIC_SetPriority+0x50>)
 80013f4:	79fb      	ldrb	r3, [r7, #7]
 80013f6:	f003 030f 	and.w	r3, r3, #15
 80013fa:	3b04      	subs	r3, #4
 80013fc:	0112      	lsls	r2, r2, #4
 80013fe:	b2d2      	uxtb	r2, r2
 8001400:	440b      	add	r3, r1
 8001402:	761a      	strb	r2, [r3, #24]
}
 8001404:	bf00      	nop
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr
 8001410:	e000e100 	.word	0xe000e100
 8001414:	e000ed00 	.word	0xe000ed00

08001418 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001418:	b480      	push	{r7}
 800141a:	b089      	sub	sp, #36	; 0x24
 800141c:	af00      	add	r7, sp, #0
 800141e:	60f8      	str	r0, [r7, #12]
 8001420:	60b9      	str	r1, [r7, #8]
 8001422:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	f003 0307 	and.w	r3, r3, #7
 800142a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	f1c3 0307 	rsb	r3, r3, #7
 8001432:	2b04      	cmp	r3, #4
 8001434:	bf28      	it	cs
 8001436:	2304      	movcs	r3, #4
 8001438:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	3304      	adds	r3, #4
 800143e:	2b06      	cmp	r3, #6
 8001440:	d902      	bls.n	8001448 <NVIC_EncodePriority+0x30>
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	3b03      	subs	r3, #3
 8001446:	e000      	b.n	800144a <NVIC_EncodePriority+0x32>
 8001448:	2300      	movs	r3, #0
 800144a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800144c:	f04f 32ff 	mov.w	r2, #4294967295
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	43da      	mvns	r2, r3
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	401a      	ands	r2, r3
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001460:	f04f 31ff 	mov.w	r1, #4294967295
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	fa01 f303 	lsl.w	r3, r1, r3
 800146a:	43d9      	mvns	r1, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001470:	4313      	orrs	r3, r2
         );
}
 8001472:	4618      	mov	r0, r3
 8001474:	3724      	adds	r7, #36	; 0x24
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
	...

08001480 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	3b01      	subs	r3, #1
 800148c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001490:	d301      	bcc.n	8001496 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001492:	2301      	movs	r3, #1
 8001494:	e00f      	b.n	80014b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001496:	4a0a      	ldr	r2, [pc, #40]	; (80014c0 <SysTick_Config+0x40>)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	3b01      	subs	r3, #1
 800149c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800149e:	210f      	movs	r1, #15
 80014a0:	f04f 30ff 	mov.w	r0, #4294967295
 80014a4:	f7ff ff8e 	bl	80013c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014a8:	4b05      	ldr	r3, [pc, #20]	; (80014c0 <SysTick_Config+0x40>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ae:	4b04      	ldr	r3, [pc, #16]	; (80014c0 <SysTick_Config+0x40>)
 80014b0:	2207      	movs	r2, #7
 80014b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014b4:	2300      	movs	r3, #0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	e000e010 	.word	0xe000e010

080014c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f7ff ff47 	bl	8001360 <__NVIC_SetPriorityGrouping>
}
 80014d2:	bf00      	nop
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014da:	b580      	push	{r7, lr}
 80014dc:	b086      	sub	sp, #24
 80014de:	af00      	add	r7, sp, #0
 80014e0:	4603      	mov	r3, r0
 80014e2:	60b9      	str	r1, [r7, #8]
 80014e4:	607a      	str	r2, [r7, #4]
 80014e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014e8:	2300      	movs	r3, #0
 80014ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014ec:	f7ff ff5c 	bl	80013a8 <__NVIC_GetPriorityGrouping>
 80014f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	68b9      	ldr	r1, [r7, #8]
 80014f6:	6978      	ldr	r0, [r7, #20]
 80014f8:	f7ff ff8e 	bl	8001418 <NVIC_EncodePriority>
 80014fc:	4602      	mov	r2, r0
 80014fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001502:	4611      	mov	r1, r2
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff ff5d 	bl	80013c4 <__NVIC_SetPriority>
}
 800150a:	bf00      	nop
 800150c:	3718      	adds	r7, #24
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	b082      	sub	sp, #8
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f7ff ffb0 	bl	8001480 <SysTick_Config>
 8001520:	4603      	mov	r3, r0
}
 8001522:	4618      	mov	r0, r3
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b082      	sub	sp, #8
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d101      	bne.n	800153c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	e00e      	b.n	800155a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	795b      	ldrb	r3, [r3, #5]
 8001540:	b2db      	uxtb	r3, r3
 8001542:	2b00      	cmp	r3, #0
 8001544:	d105      	bne.n	8001552 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2200      	movs	r2, #0
 800154a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f7fe ffcd 	bl	80004ec <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2201      	movs	r2, #1
 8001556:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001562:	b580      	push	{r7, lr}
 8001564:	b086      	sub	sp, #24
 8001566:	af00      	add	r7, sp, #0
 8001568:	60f8      	str	r0, [r7, #12]
 800156a:	60b9      	str	r1, [r7, #8]
 800156c:	607a      	str	r2, [r7, #4]
 800156e:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001570:	2300      	movs	r3, #0
 8001572:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001578:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001580:	2b01      	cmp	r3, #1
 8001582:	d101      	bne.n	8001588 <HAL_DMA_Start_IT+0x26>
 8001584:	2302      	movs	r3, #2
 8001586:	e040      	b.n	800160a <HAL_DMA_Start_IT+0xa8>
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	2201      	movs	r2, #1
 800158c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001596:	b2db      	uxtb	r3, r3
 8001598:	2b01      	cmp	r3, #1
 800159a:	d12f      	bne.n	80015fc <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	2202      	movs	r2, #2
 80015a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	2200      	movs	r2, #0
 80015a8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	68b9      	ldr	r1, [r7, #8]
 80015b0:	68f8      	ldr	r0, [r7, #12]
 80015b2:	f000 f82e 	bl	8001612 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015ba:	223f      	movs	r2, #63	; 0x3f
 80015bc:	409a      	lsls	r2, r3
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f042 0216 	orr.w	r2, r2, #22
 80015d0:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d007      	beq.n	80015ea <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f042 0208 	orr.w	r2, r2, #8
 80015e8:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f042 0201 	orr.w	r2, r2, #1
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	e005      	b.n	8001608 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	2200      	movs	r2, #0
 8001600:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001604:	2302      	movs	r3, #2
 8001606:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001608:	7dfb      	ldrb	r3, [r7, #23]
}
 800160a:	4618      	mov	r0, r3
 800160c:	3718      	adds	r7, #24
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001612:	b480      	push	{r7}
 8001614:	b085      	sub	sp, #20
 8001616:	af00      	add	r7, sp, #0
 8001618:	60f8      	str	r0, [r7, #12]
 800161a:	60b9      	str	r1, [r7, #8]
 800161c:	607a      	str	r2, [r7, #4]
 800161e:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800162e:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	683a      	ldr	r2, [r7, #0]
 8001636:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	2b40      	cmp	r3, #64	; 0x40
 800163e:	d108      	bne.n	8001652 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	68ba      	ldr	r2, [r7, #8]
 800164e:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001650:	e007      	b.n	8001662 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	68ba      	ldr	r2, [r7, #8]
 8001658:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	60da      	str	r2, [r3, #12]
}
 8001662:	bf00      	nop
 8001664:	3714      	adds	r7, #20
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
	...

08001670 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001670:	b480      	push	{r7}
 8001672:	b089      	sub	sp, #36	; 0x24
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800167a:	2300      	movs	r3, #0
 800167c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800167e:	2300      	movs	r3, #0
 8001680:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001682:	2300      	movs	r3, #0
 8001684:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001686:	2300      	movs	r3, #0
 8001688:	61fb      	str	r3, [r7, #28]
 800168a:	e16b      	b.n	8001964 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800168c:	2201      	movs	r2, #1
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	697a      	ldr	r2, [r7, #20]
 800169c:	4013      	ands	r3, r2
 800169e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016a0:	693a      	ldr	r2, [r7, #16]
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	f040 815a 	bne.w	800195e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f003 0303 	and.w	r3, r3, #3
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d005      	beq.n	80016c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d130      	bne.n	8001724 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	2203      	movs	r2, #3
 80016ce:	fa02 f303 	lsl.w	r3, r2, r3
 80016d2:	43db      	mvns	r3, r3
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	4013      	ands	r3, r2
 80016d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	68da      	ldr	r2, [r3, #12]
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	fa02 f303 	lsl.w	r3, r2, r3
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016f8:	2201      	movs	r2, #1
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001700:	43db      	mvns	r3, r3
 8001702:	69ba      	ldr	r2, [r7, #24]
 8001704:	4013      	ands	r3, r2
 8001706:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	091b      	lsrs	r3, r3, #4
 800170e:	f003 0201 	and.w	r2, r3, #1
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	4313      	orrs	r3, r2
 800171c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f003 0303 	and.w	r3, r3, #3
 800172c:	2b03      	cmp	r3, #3
 800172e:	d017      	beq.n	8001760 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	2203      	movs	r2, #3
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	43db      	mvns	r3, r3
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	4013      	ands	r3, r2
 8001746:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	689a      	ldr	r2, [r3, #8]
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	4313      	orrs	r3, r2
 8001758:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	69ba      	ldr	r2, [r7, #24]
 800175e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f003 0303 	and.w	r3, r3, #3
 8001768:	2b02      	cmp	r3, #2
 800176a:	d123      	bne.n	80017b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	08da      	lsrs	r2, r3, #3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	3208      	adds	r2, #8
 8001774:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001778:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	f003 0307 	and.w	r3, r3, #7
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	220f      	movs	r2, #15
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	43db      	mvns	r3, r3
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	4013      	ands	r3, r2
 800178e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	691a      	ldr	r2, [r3, #16]
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	f003 0307 	and.w	r3, r3, #7
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	08da      	lsrs	r2, r3, #3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	3208      	adds	r2, #8
 80017ae:	69b9      	ldr	r1, [r7, #24]
 80017b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	2203      	movs	r2, #3
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	43db      	mvns	r3, r3
 80017c6:	69ba      	ldr	r2, [r7, #24]
 80017c8:	4013      	ands	r3, r2
 80017ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f003 0203 	and.w	r2, r3, #3
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	fa02 f303 	lsl.w	r3, r2, r3
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	4313      	orrs	r3, r2
 80017e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	f000 80b4 	beq.w	800195e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	60fb      	str	r3, [r7, #12]
 80017fa:	4b60      	ldr	r3, [pc, #384]	; (800197c <HAL_GPIO_Init+0x30c>)
 80017fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fe:	4a5f      	ldr	r2, [pc, #380]	; (800197c <HAL_GPIO_Init+0x30c>)
 8001800:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001804:	6453      	str	r3, [r2, #68]	; 0x44
 8001806:	4b5d      	ldr	r3, [pc, #372]	; (800197c <HAL_GPIO_Init+0x30c>)
 8001808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001812:	4a5b      	ldr	r2, [pc, #364]	; (8001980 <HAL_GPIO_Init+0x310>)
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	089b      	lsrs	r3, r3, #2
 8001818:	3302      	adds	r3, #2
 800181a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800181e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	f003 0303 	and.w	r3, r3, #3
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	220f      	movs	r2, #15
 800182a:	fa02 f303 	lsl.w	r3, r2, r3
 800182e:	43db      	mvns	r3, r3
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	4013      	ands	r3, r2
 8001834:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a52      	ldr	r2, [pc, #328]	; (8001984 <HAL_GPIO_Init+0x314>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d02b      	beq.n	8001896 <HAL_GPIO_Init+0x226>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4a51      	ldr	r2, [pc, #324]	; (8001988 <HAL_GPIO_Init+0x318>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d025      	beq.n	8001892 <HAL_GPIO_Init+0x222>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4a50      	ldr	r2, [pc, #320]	; (800198c <HAL_GPIO_Init+0x31c>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d01f      	beq.n	800188e <HAL_GPIO_Init+0x21e>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4a4f      	ldr	r2, [pc, #316]	; (8001990 <HAL_GPIO_Init+0x320>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d019      	beq.n	800188a <HAL_GPIO_Init+0x21a>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4a4e      	ldr	r2, [pc, #312]	; (8001994 <HAL_GPIO_Init+0x324>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d013      	beq.n	8001886 <HAL_GPIO_Init+0x216>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a4d      	ldr	r2, [pc, #308]	; (8001998 <HAL_GPIO_Init+0x328>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d00d      	beq.n	8001882 <HAL_GPIO_Init+0x212>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a4c      	ldr	r2, [pc, #304]	; (800199c <HAL_GPIO_Init+0x32c>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d007      	beq.n	800187e <HAL_GPIO_Init+0x20e>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a4b      	ldr	r2, [pc, #300]	; (80019a0 <HAL_GPIO_Init+0x330>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d101      	bne.n	800187a <HAL_GPIO_Init+0x20a>
 8001876:	2307      	movs	r3, #7
 8001878:	e00e      	b.n	8001898 <HAL_GPIO_Init+0x228>
 800187a:	2308      	movs	r3, #8
 800187c:	e00c      	b.n	8001898 <HAL_GPIO_Init+0x228>
 800187e:	2306      	movs	r3, #6
 8001880:	e00a      	b.n	8001898 <HAL_GPIO_Init+0x228>
 8001882:	2305      	movs	r3, #5
 8001884:	e008      	b.n	8001898 <HAL_GPIO_Init+0x228>
 8001886:	2304      	movs	r3, #4
 8001888:	e006      	b.n	8001898 <HAL_GPIO_Init+0x228>
 800188a:	2303      	movs	r3, #3
 800188c:	e004      	b.n	8001898 <HAL_GPIO_Init+0x228>
 800188e:	2302      	movs	r3, #2
 8001890:	e002      	b.n	8001898 <HAL_GPIO_Init+0x228>
 8001892:	2301      	movs	r3, #1
 8001894:	e000      	b.n	8001898 <HAL_GPIO_Init+0x228>
 8001896:	2300      	movs	r3, #0
 8001898:	69fa      	ldr	r2, [r7, #28]
 800189a:	f002 0203 	and.w	r2, r2, #3
 800189e:	0092      	lsls	r2, r2, #2
 80018a0:	4093      	lsls	r3, r2
 80018a2:	69ba      	ldr	r2, [r7, #24]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018a8:	4935      	ldr	r1, [pc, #212]	; (8001980 <HAL_GPIO_Init+0x310>)
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	089b      	lsrs	r3, r3, #2
 80018ae:	3302      	adds	r3, #2
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018b6:	4b3b      	ldr	r3, [pc, #236]	; (80019a4 <HAL_GPIO_Init+0x334>)
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	43db      	mvns	r3, r3
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	4013      	ands	r3, r2
 80018c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d003      	beq.n	80018da <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80018d2:	69ba      	ldr	r2, [r7, #24]
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	4313      	orrs	r3, r2
 80018d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018da:	4a32      	ldr	r2, [pc, #200]	; (80019a4 <HAL_GPIO_Init+0x334>)
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018e0:	4b30      	ldr	r3, [pc, #192]	; (80019a4 <HAL_GPIO_Init+0x334>)
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	43db      	mvns	r3, r3
 80018ea:	69ba      	ldr	r2, [r7, #24]
 80018ec:	4013      	ands	r3, r2
 80018ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d003      	beq.n	8001904 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	4313      	orrs	r3, r2
 8001902:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001904:	4a27      	ldr	r2, [pc, #156]	; (80019a4 <HAL_GPIO_Init+0x334>)
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800190a:	4b26      	ldr	r3, [pc, #152]	; (80019a4 <HAL_GPIO_Init+0x334>)
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	43db      	mvns	r3, r3
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	4013      	ands	r3, r2
 8001918:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d003      	beq.n	800192e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001926:	69ba      	ldr	r2, [r7, #24]
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	4313      	orrs	r3, r2
 800192c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800192e:	4a1d      	ldr	r2, [pc, #116]	; (80019a4 <HAL_GPIO_Init+0x334>)
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001934:	4b1b      	ldr	r3, [pc, #108]	; (80019a4 <HAL_GPIO_Init+0x334>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	43db      	mvns	r3, r3
 800193e:	69ba      	ldr	r2, [r7, #24]
 8001940:	4013      	ands	r3, r2
 8001942:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d003      	beq.n	8001958 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	4313      	orrs	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001958:	4a12      	ldr	r2, [pc, #72]	; (80019a4 <HAL_GPIO_Init+0x334>)
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	3301      	adds	r3, #1
 8001962:	61fb      	str	r3, [r7, #28]
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	2b0f      	cmp	r3, #15
 8001968:	f67f ae90 	bls.w	800168c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800196c:	bf00      	nop
 800196e:	bf00      	nop
 8001970:	3724      	adds	r7, #36	; 0x24
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	40023800 	.word	0x40023800
 8001980:	40013800 	.word	0x40013800
 8001984:	40020000 	.word	0x40020000
 8001988:	40020400 	.word	0x40020400
 800198c:	40020800 	.word	0x40020800
 8001990:	40020c00 	.word	0x40020c00
 8001994:	40021000 	.word	0x40021000
 8001998:	40021400 	.word	0x40021400
 800199c:	40021800 	.word	0x40021800
 80019a0:	40021c00 	.word	0x40021c00
 80019a4:	40013c00 	.word	0x40013c00

080019a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	460b      	mov	r3, r1
 80019b2:	807b      	strh	r3, [r7, #2]
 80019b4:	4613      	mov	r3, r2
 80019b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019b8:	787b      	ldrb	r3, [r7, #1]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d003      	beq.n	80019c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019be:	887a      	ldrh	r2, [r7, #2]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019c4:	e003      	b.n	80019ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019c6:	887b      	ldrh	r3, [r7, #2]
 80019c8:	041a      	lsls	r2, r3, #16
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	619a      	str	r2, [r3, #24]
}
 80019ce:	bf00      	nop
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
	...

080019dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b086      	sub	sp, #24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d101      	bne.n	80019ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e267      	b.n	8001ebe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d075      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019fa:	4b88      	ldr	r3, [pc, #544]	; (8001c1c <HAL_RCC_OscConfig+0x240>)
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f003 030c 	and.w	r3, r3, #12
 8001a02:	2b04      	cmp	r3, #4
 8001a04:	d00c      	beq.n	8001a20 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a06:	4b85      	ldr	r3, [pc, #532]	; (8001c1c <HAL_RCC_OscConfig+0x240>)
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a0e:	2b08      	cmp	r3, #8
 8001a10:	d112      	bne.n	8001a38 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a12:	4b82      	ldr	r3, [pc, #520]	; (8001c1c <HAL_RCC_OscConfig+0x240>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a1e:	d10b      	bne.n	8001a38 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a20:	4b7e      	ldr	r3, [pc, #504]	; (8001c1c <HAL_RCC_OscConfig+0x240>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d05b      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x108>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d157      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e242      	b.n	8001ebe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a40:	d106      	bne.n	8001a50 <HAL_RCC_OscConfig+0x74>
 8001a42:	4b76      	ldr	r3, [pc, #472]	; (8001c1c <HAL_RCC_OscConfig+0x240>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a75      	ldr	r2, [pc, #468]	; (8001c1c <HAL_RCC_OscConfig+0x240>)
 8001a48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a4c:	6013      	str	r3, [r2, #0]
 8001a4e:	e01d      	b.n	8001a8c <HAL_RCC_OscConfig+0xb0>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a58:	d10c      	bne.n	8001a74 <HAL_RCC_OscConfig+0x98>
 8001a5a:	4b70      	ldr	r3, [pc, #448]	; (8001c1c <HAL_RCC_OscConfig+0x240>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a6f      	ldr	r2, [pc, #444]	; (8001c1c <HAL_RCC_OscConfig+0x240>)
 8001a60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a64:	6013      	str	r3, [r2, #0]
 8001a66:	4b6d      	ldr	r3, [pc, #436]	; (8001c1c <HAL_RCC_OscConfig+0x240>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a6c      	ldr	r2, [pc, #432]	; (8001c1c <HAL_RCC_OscConfig+0x240>)
 8001a6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a70:	6013      	str	r3, [r2, #0]
 8001a72:	e00b      	b.n	8001a8c <HAL_RCC_OscConfig+0xb0>
 8001a74:	4b69      	ldr	r3, [pc, #420]	; (8001c1c <HAL_RCC_OscConfig+0x240>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a68      	ldr	r2, [pc, #416]	; (8001c1c <HAL_RCC_OscConfig+0x240>)
 8001a7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a7e:	6013      	str	r3, [r2, #0]
 8001a80:	4b66      	ldr	r3, [pc, #408]	; (8001c1c <HAL_RCC_OscConfig+0x240>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a65      	ldr	r2, [pc, #404]	; (8001c1c <HAL_RCC_OscConfig+0x240>)
 8001a86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d013      	beq.n	8001abc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a94:	f7ff fc34 	bl	8001300 <HAL_GetTick>
 8001a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a9a:	e008      	b.n	8001aae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a9c:	f7ff fc30 	bl	8001300 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	2b64      	cmp	r3, #100	; 0x64
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e207      	b.n	8001ebe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aae:	4b5b      	ldr	r3, [pc, #364]	; (8001c1c <HAL_RCC_OscConfig+0x240>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d0f0      	beq.n	8001a9c <HAL_RCC_OscConfig+0xc0>
 8001aba:	e014      	b.n	8001ae6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001abc:	f7ff fc20 	bl	8001300 <HAL_GetTick>
 8001ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ac2:	e008      	b.n	8001ad6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ac4:	f7ff fc1c 	bl	8001300 <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b64      	cmp	r3, #100	; 0x64
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e1f3      	b.n	8001ebe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ad6:	4b51      	ldr	r3, [pc, #324]	; (8001c1c <HAL_RCC_OscConfig+0x240>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d1f0      	bne.n	8001ac4 <HAL_RCC_OscConfig+0xe8>
 8001ae2:	e000      	b.n	8001ae6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ae4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d063      	beq.n	8001bba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001af2:	4b4a      	ldr	r3, [pc, #296]	; (8001c1c <HAL_RCC_OscConfig+0x240>)
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	f003 030c 	and.w	r3, r3, #12
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d00b      	beq.n	8001b16 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001afe:	4b47      	ldr	r3, [pc, #284]	; (8001c1c <HAL_RCC_OscConfig+0x240>)
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b06:	2b08      	cmp	r3, #8
 8001b08:	d11c      	bne.n	8001b44 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b0a:	4b44      	ldr	r3, [pc, #272]	; (8001c1c <HAL_RCC_OscConfig+0x240>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d116      	bne.n	8001b44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b16:	4b41      	ldr	r3, [pc, #260]	; (8001c1c <HAL_RCC_OscConfig+0x240>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d005      	beq.n	8001b2e <HAL_RCC_OscConfig+0x152>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d001      	beq.n	8001b2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e1c7      	b.n	8001ebe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b2e:	4b3b      	ldr	r3, [pc, #236]	; (8001c1c <HAL_RCC_OscConfig+0x240>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	691b      	ldr	r3, [r3, #16]
 8001b3a:	00db      	lsls	r3, r3, #3
 8001b3c:	4937      	ldr	r1, [pc, #220]	; (8001c1c <HAL_RCC_OscConfig+0x240>)
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b42:	e03a      	b.n	8001bba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d020      	beq.n	8001b8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b4c:	4b34      	ldr	r3, [pc, #208]	; (8001c20 <HAL_RCC_OscConfig+0x244>)
 8001b4e:	2201      	movs	r2, #1
 8001b50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b52:	f7ff fbd5 	bl	8001300 <HAL_GetTick>
 8001b56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b58:	e008      	b.n	8001b6c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b5a:	f7ff fbd1 	bl	8001300 <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d901      	bls.n	8001b6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	e1a8      	b.n	8001ebe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b6c:	4b2b      	ldr	r3, [pc, #172]	; (8001c1c <HAL_RCC_OscConfig+0x240>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0302 	and.w	r3, r3, #2
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d0f0      	beq.n	8001b5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b78:	4b28      	ldr	r3, [pc, #160]	; (8001c1c <HAL_RCC_OscConfig+0x240>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	691b      	ldr	r3, [r3, #16]
 8001b84:	00db      	lsls	r3, r3, #3
 8001b86:	4925      	ldr	r1, [pc, #148]	; (8001c1c <HAL_RCC_OscConfig+0x240>)
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	600b      	str	r3, [r1, #0]
 8001b8c:	e015      	b.n	8001bba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b8e:	4b24      	ldr	r3, [pc, #144]	; (8001c20 <HAL_RCC_OscConfig+0x244>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b94:	f7ff fbb4 	bl	8001300 <HAL_GetTick>
 8001b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b9a:	e008      	b.n	8001bae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b9c:	f7ff fbb0 	bl	8001300 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e187      	b.n	8001ebe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bae:	4b1b      	ldr	r3, [pc, #108]	; (8001c1c <HAL_RCC_OscConfig+0x240>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d1f0      	bne.n	8001b9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0308 	and.w	r3, r3, #8
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d036      	beq.n	8001c34 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	695b      	ldr	r3, [r3, #20]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d016      	beq.n	8001bfc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bce:	4b15      	ldr	r3, [pc, #84]	; (8001c24 <HAL_RCC_OscConfig+0x248>)
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bd4:	f7ff fb94 	bl	8001300 <HAL_GetTick>
 8001bd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bda:	e008      	b.n	8001bee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bdc:	f7ff fb90 	bl	8001300 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e167      	b.n	8001ebe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bee:	4b0b      	ldr	r3, [pc, #44]	; (8001c1c <HAL_RCC_OscConfig+0x240>)
 8001bf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d0f0      	beq.n	8001bdc <HAL_RCC_OscConfig+0x200>
 8001bfa:	e01b      	b.n	8001c34 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bfc:	4b09      	ldr	r3, [pc, #36]	; (8001c24 <HAL_RCC_OscConfig+0x248>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c02:	f7ff fb7d 	bl	8001300 <HAL_GetTick>
 8001c06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c08:	e00e      	b.n	8001c28 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c0a:	f7ff fb79 	bl	8001300 <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d907      	bls.n	8001c28 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e150      	b.n	8001ebe <HAL_RCC_OscConfig+0x4e2>
 8001c1c:	40023800 	.word	0x40023800
 8001c20:	42470000 	.word	0x42470000
 8001c24:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c28:	4b88      	ldr	r3, [pc, #544]	; (8001e4c <HAL_RCC_OscConfig+0x470>)
 8001c2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c2c:	f003 0302 	and.w	r3, r3, #2
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d1ea      	bne.n	8001c0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0304 	and.w	r3, r3, #4
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	f000 8097 	beq.w	8001d70 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c42:	2300      	movs	r3, #0
 8001c44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c46:	4b81      	ldr	r3, [pc, #516]	; (8001e4c <HAL_RCC_OscConfig+0x470>)
 8001c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d10f      	bne.n	8001c72 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c52:	2300      	movs	r3, #0
 8001c54:	60bb      	str	r3, [r7, #8]
 8001c56:	4b7d      	ldr	r3, [pc, #500]	; (8001e4c <HAL_RCC_OscConfig+0x470>)
 8001c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5a:	4a7c      	ldr	r2, [pc, #496]	; (8001e4c <HAL_RCC_OscConfig+0x470>)
 8001c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c60:	6413      	str	r3, [r2, #64]	; 0x40
 8001c62:	4b7a      	ldr	r3, [pc, #488]	; (8001e4c <HAL_RCC_OscConfig+0x470>)
 8001c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c6a:	60bb      	str	r3, [r7, #8]
 8001c6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c72:	4b77      	ldr	r3, [pc, #476]	; (8001e50 <HAL_RCC_OscConfig+0x474>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d118      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c7e:	4b74      	ldr	r3, [pc, #464]	; (8001e50 <HAL_RCC_OscConfig+0x474>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a73      	ldr	r2, [pc, #460]	; (8001e50 <HAL_RCC_OscConfig+0x474>)
 8001c84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c8a:	f7ff fb39 	bl	8001300 <HAL_GetTick>
 8001c8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c90:	e008      	b.n	8001ca4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c92:	f7ff fb35 	bl	8001300 <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d901      	bls.n	8001ca4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e10c      	b.n	8001ebe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ca4:	4b6a      	ldr	r3, [pc, #424]	; (8001e50 <HAL_RCC_OscConfig+0x474>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d0f0      	beq.n	8001c92 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d106      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x2ea>
 8001cb8:	4b64      	ldr	r3, [pc, #400]	; (8001e4c <HAL_RCC_OscConfig+0x470>)
 8001cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cbc:	4a63      	ldr	r2, [pc, #396]	; (8001e4c <HAL_RCC_OscConfig+0x470>)
 8001cbe:	f043 0301 	orr.w	r3, r3, #1
 8001cc2:	6713      	str	r3, [r2, #112]	; 0x70
 8001cc4:	e01c      	b.n	8001d00 <HAL_RCC_OscConfig+0x324>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	2b05      	cmp	r3, #5
 8001ccc:	d10c      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x30c>
 8001cce:	4b5f      	ldr	r3, [pc, #380]	; (8001e4c <HAL_RCC_OscConfig+0x470>)
 8001cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cd2:	4a5e      	ldr	r2, [pc, #376]	; (8001e4c <HAL_RCC_OscConfig+0x470>)
 8001cd4:	f043 0304 	orr.w	r3, r3, #4
 8001cd8:	6713      	str	r3, [r2, #112]	; 0x70
 8001cda:	4b5c      	ldr	r3, [pc, #368]	; (8001e4c <HAL_RCC_OscConfig+0x470>)
 8001cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cde:	4a5b      	ldr	r2, [pc, #364]	; (8001e4c <HAL_RCC_OscConfig+0x470>)
 8001ce0:	f043 0301 	orr.w	r3, r3, #1
 8001ce4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ce6:	e00b      	b.n	8001d00 <HAL_RCC_OscConfig+0x324>
 8001ce8:	4b58      	ldr	r3, [pc, #352]	; (8001e4c <HAL_RCC_OscConfig+0x470>)
 8001cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cec:	4a57      	ldr	r2, [pc, #348]	; (8001e4c <HAL_RCC_OscConfig+0x470>)
 8001cee:	f023 0301 	bic.w	r3, r3, #1
 8001cf2:	6713      	str	r3, [r2, #112]	; 0x70
 8001cf4:	4b55      	ldr	r3, [pc, #340]	; (8001e4c <HAL_RCC_OscConfig+0x470>)
 8001cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cf8:	4a54      	ldr	r2, [pc, #336]	; (8001e4c <HAL_RCC_OscConfig+0x470>)
 8001cfa:	f023 0304 	bic.w	r3, r3, #4
 8001cfe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d015      	beq.n	8001d34 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d08:	f7ff fafa 	bl	8001300 <HAL_GetTick>
 8001d0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d0e:	e00a      	b.n	8001d26 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d10:	f7ff faf6 	bl	8001300 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e0cb      	b.n	8001ebe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d26:	4b49      	ldr	r3, [pc, #292]	; (8001e4c <HAL_RCC_OscConfig+0x470>)
 8001d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d0ee      	beq.n	8001d10 <HAL_RCC_OscConfig+0x334>
 8001d32:	e014      	b.n	8001d5e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d34:	f7ff fae4 	bl	8001300 <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d3a:	e00a      	b.n	8001d52 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d3c:	f7ff fae0 	bl	8001300 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e0b5      	b.n	8001ebe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d52:	4b3e      	ldr	r3, [pc, #248]	; (8001e4c <HAL_RCC_OscConfig+0x470>)
 8001d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d1ee      	bne.n	8001d3c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d5e:	7dfb      	ldrb	r3, [r7, #23]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d105      	bne.n	8001d70 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d64:	4b39      	ldr	r3, [pc, #228]	; (8001e4c <HAL_RCC_OscConfig+0x470>)
 8001d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d68:	4a38      	ldr	r2, [pc, #224]	; (8001e4c <HAL_RCC_OscConfig+0x470>)
 8001d6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d6e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	699b      	ldr	r3, [r3, #24]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	f000 80a1 	beq.w	8001ebc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d7a:	4b34      	ldr	r3, [pc, #208]	; (8001e4c <HAL_RCC_OscConfig+0x470>)
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	f003 030c 	and.w	r3, r3, #12
 8001d82:	2b08      	cmp	r3, #8
 8001d84:	d05c      	beq.n	8001e40 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	699b      	ldr	r3, [r3, #24]
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d141      	bne.n	8001e12 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d8e:	4b31      	ldr	r3, [pc, #196]	; (8001e54 <HAL_RCC_OscConfig+0x478>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d94:	f7ff fab4 	bl	8001300 <HAL_GetTick>
 8001d98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d9a:	e008      	b.n	8001dae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d9c:	f7ff fab0 	bl	8001300 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e087      	b.n	8001ebe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dae:	4b27      	ldr	r3, [pc, #156]	; (8001e4c <HAL_RCC_OscConfig+0x470>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d1f0      	bne.n	8001d9c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	69da      	ldr	r2, [r3, #28]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6a1b      	ldr	r3, [r3, #32]
 8001dc2:	431a      	orrs	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc8:	019b      	lsls	r3, r3, #6
 8001dca:	431a      	orrs	r2, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dd0:	085b      	lsrs	r3, r3, #1
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	041b      	lsls	r3, r3, #16
 8001dd6:	431a      	orrs	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ddc:	061b      	lsls	r3, r3, #24
 8001dde:	491b      	ldr	r1, [pc, #108]	; (8001e4c <HAL_RCC_OscConfig+0x470>)
 8001de0:	4313      	orrs	r3, r2
 8001de2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001de4:	4b1b      	ldr	r3, [pc, #108]	; (8001e54 <HAL_RCC_OscConfig+0x478>)
 8001de6:	2201      	movs	r2, #1
 8001de8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dea:	f7ff fa89 	bl	8001300 <HAL_GetTick>
 8001dee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001df0:	e008      	b.n	8001e04 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001df2:	f7ff fa85 	bl	8001300 <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e05c      	b.n	8001ebe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e04:	4b11      	ldr	r3, [pc, #68]	; (8001e4c <HAL_RCC_OscConfig+0x470>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d0f0      	beq.n	8001df2 <HAL_RCC_OscConfig+0x416>
 8001e10:	e054      	b.n	8001ebc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e12:	4b10      	ldr	r3, [pc, #64]	; (8001e54 <HAL_RCC_OscConfig+0x478>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e18:	f7ff fa72 	bl	8001300 <HAL_GetTick>
 8001e1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e1e:	e008      	b.n	8001e32 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e20:	f7ff fa6e 	bl	8001300 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e045      	b.n	8001ebe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e32:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <HAL_RCC_OscConfig+0x470>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d1f0      	bne.n	8001e20 <HAL_RCC_OscConfig+0x444>
 8001e3e:	e03d      	b.n	8001ebc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	699b      	ldr	r3, [r3, #24]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d107      	bne.n	8001e58 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e038      	b.n	8001ebe <HAL_RCC_OscConfig+0x4e2>
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	40007000 	.word	0x40007000
 8001e54:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e58:	4b1b      	ldr	r3, [pc, #108]	; (8001ec8 <HAL_RCC_OscConfig+0x4ec>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	699b      	ldr	r3, [r3, #24]
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d028      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d121      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d11a      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e82:	68fa      	ldr	r2, [r7, #12]
 8001e84:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e88:	4013      	ands	r3, r2
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e8e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d111      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e9e:	085b      	lsrs	r3, r3, #1
 8001ea0:	3b01      	subs	r3, #1
 8001ea2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d107      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d001      	beq.n	8001ebc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e000      	b.n	8001ebe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3718      	adds	r7, #24
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	40023800 	.word	0x40023800

08001ecc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d101      	bne.n	8001ee0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e0cc      	b.n	800207a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ee0:	4b68      	ldr	r3, [pc, #416]	; (8002084 <HAL_RCC_ClockConfig+0x1b8>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0307 	and.w	r3, r3, #7
 8001ee8:	683a      	ldr	r2, [r7, #0]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d90c      	bls.n	8001f08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eee:	4b65      	ldr	r3, [pc, #404]	; (8002084 <HAL_RCC_ClockConfig+0x1b8>)
 8001ef0:	683a      	ldr	r2, [r7, #0]
 8001ef2:	b2d2      	uxtb	r2, r2
 8001ef4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ef6:	4b63      	ldr	r3, [pc, #396]	; (8002084 <HAL_RCC_ClockConfig+0x1b8>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0307 	and.w	r3, r3, #7
 8001efe:	683a      	ldr	r2, [r7, #0]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d001      	beq.n	8001f08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e0b8      	b.n	800207a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0302 	and.w	r3, r3, #2
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d020      	beq.n	8001f56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0304 	and.w	r3, r3, #4
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d005      	beq.n	8001f2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f20:	4b59      	ldr	r3, [pc, #356]	; (8002088 <HAL_RCC_ClockConfig+0x1bc>)
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	4a58      	ldr	r2, [pc, #352]	; (8002088 <HAL_RCC_ClockConfig+0x1bc>)
 8001f26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0308 	and.w	r3, r3, #8
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d005      	beq.n	8001f44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f38:	4b53      	ldr	r3, [pc, #332]	; (8002088 <HAL_RCC_ClockConfig+0x1bc>)
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	4a52      	ldr	r2, [pc, #328]	; (8002088 <HAL_RCC_ClockConfig+0x1bc>)
 8001f3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f44:	4b50      	ldr	r3, [pc, #320]	; (8002088 <HAL_RCC_ClockConfig+0x1bc>)
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	494d      	ldr	r1, [pc, #308]	; (8002088 <HAL_RCC_ClockConfig+0x1bc>)
 8001f52:	4313      	orrs	r3, r2
 8001f54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d044      	beq.n	8001fec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d107      	bne.n	8001f7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f6a:	4b47      	ldr	r3, [pc, #284]	; (8002088 <HAL_RCC_ClockConfig+0x1bc>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d119      	bne.n	8001faa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e07f      	b.n	800207a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d003      	beq.n	8001f8a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f86:	2b03      	cmp	r3, #3
 8001f88:	d107      	bne.n	8001f9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f8a:	4b3f      	ldr	r3, [pc, #252]	; (8002088 <HAL_RCC_ClockConfig+0x1bc>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d109      	bne.n	8001faa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e06f      	b.n	800207a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f9a:	4b3b      	ldr	r3, [pc, #236]	; (8002088 <HAL_RCC_ClockConfig+0x1bc>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d101      	bne.n	8001faa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e067      	b.n	800207a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001faa:	4b37      	ldr	r3, [pc, #220]	; (8002088 <HAL_RCC_ClockConfig+0x1bc>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f023 0203 	bic.w	r2, r3, #3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	4934      	ldr	r1, [pc, #208]	; (8002088 <HAL_RCC_ClockConfig+0x1bc>)
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fbc:	f7ff f9a0 	bl	8001300 <HAL_GetTick>
 8001fc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fc2:	e00a      	b.n	8001fda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fc4:	f7ff f99c 	bl	8001300 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e04f      	b.n	800207a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fda:	4b2b      	ldr	r3, [pc, #172]	; (8002088 <HAL_RCC_ClockConfig+0x1bc>)
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f003 020c 	and.w	r2, r3, #12
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d1eb      	bne.n	8001fc4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fec:	4b25      	ldr	r3, [pc, #148]	; (8002084 <HAL_RCC_ClockConfig+0x1b8>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0307 	and.w	r3, r3, #7
 8001ff4:	683a      	ldr	r2, [r7, #0]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d20c      	bcs.n	8002014 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ffa:	4b22      	ldr	r3, [pc, #136]	; (8002084 <HAL_RCC_ClockConfig+0x1b8>)
 8001ffc:	683a      	ldr	r2, [r7, #0]
 8001ffe:	b2d2      	uxtb	r2, r2
 8002000:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002002:	4b20      	ldr	r3, [pc, #128]	; (8002084 <HAL_RCC_ClockConfig+0x1b8>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0307 	and.w	r3, r3, #7
 800200a:	683a      	ldr	r2, [r7, #0]
 800200c:	429a      	cmp	r2, r3
 800200e:	d001      	beq.n	8002014 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e032      	b.n	800207a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0304 	and.w	r3, r3, #4
 800201c:	2b00      	cmp	r3, #0
 800201e:	d008      	beq.n	8002032 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002020:	4b19      	ldr	r3, [pc, #100]	; (8002088 <HAL_RCC_ClockConfig+0x1bc>)
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	4916      	ldr	r1, [pc, #88]	; (8002088 <HAL_RCC_ClockConfig+0x1bc>)
 800202e:	4313      	orrs	r3, r2
 8002030:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0308 	and.w	r3, r3, #8
 800203a:	2b00      	cmp	r3, #0
 800203c:	d009      	beq.n	8002052 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800203e:	4b12      	ldr	r3, [pc, #72]	; (8002088 <HAL_RCC_ClockConfig+0x1bc>)
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	00db      	lsls	r3, r3, #3
 800204c:	490e      	ldr	r1, [pc, #56]	; (8002088 <HAL_RCC_ClockConfig+0x1bc>)
 800204e:	4313      	orrs	r3, r2
 8002050:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002052:	f000 f821 	bl	8002098 <HAL_RCC_GetSysClockFreq>
 8002056:	4602      	mov	r2, r0
 8002058:	4b0b      	ldr	r3, [pc, #44]	; (8002088 <HAL_RCC_ClockConfig+0x1bc>)
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	091b      	lsrs	r3, r3, #4
 800205e:	f003 030f 	and.w	r3, r3, #15
 8002062:	490a      	ldr	r1, [pc, #40]	; (800208c <HAL_RCC_ClockConfig+0x1c0>)
 8002064:	5ccb      	ldrb	r3, [r1, r3]
 8002066:	fa22 f303 	lsr.w	r3, r2, r3
 800206a:	4a09      	ldr	r2, [pc, #36]	; (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 800206c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800206e:	4b09      	ldr	r3, [pc, #36]	; (8002094 <HAL_RCC_ClockConfig+0x1c8>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff f900 	bl	8001278 <HAL_InitTick>

  return HAL_OK;
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	3710      	adds	r7, #16
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	40023c00 	.word	0x40023c00
 8002088:	40023800 	.word	0x40023800
 800208c:	08003cf4 	.word	0x08003cf4
 8002090:	20000000 	.word	0x20000000
 8002094:	20000004 	.word	0x20000004

08002098 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002098:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800209c:	b090      	sub	sp, #64	; 0x40
 800209e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80020a0:	2300      	movs	r3, #0
 80020a2:	637b      	str	r3, [r7, #52]	; 0x34
 80020a4:	2300      	movs	r3, #0
 80020a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020a8:	2300      	movs	r3, #0
 80020aa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80020ac:	2300      	movs	r3, #0
 80020ae:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020b0:	4b59      	ldr	r3, [pc, #356]	; (8002218 <HAL_RCC_GetSysClockFreq+0x180>)
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f003 030c 	and.w	r3, r3, #12
 80020b8:	2b08      	cmp	r3, #8
 80020ba:	d00d      	beq.n	80020d8 <HAL_RCC_GetSysClockFreq+0x40>
 80020bc:	2b08      	cmp	r3, #8
 80020be:	f200 80a1 	bhi.w	8002204 <HAL_RCC_GetSysClockFreq+0x16c>
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d002      	beq.n	80020cc <HAL_RCC_GetSysClockFreq+0x34>
 80020c6:	2b04      	cmp	r3, #4
 80020c8:	d003      	beq.n	80020d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80020ca:	e09b      	b.n	8002204 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020cc:	4b53      	ldr	r3, [pc, #332]	; (800221c <HAL_RCC_GetSysClockFreq+0x184>)
 80020ce:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80020d0:	e09b      	b.n	800220a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80020d2:	4b53      	ldr	r3, [pc, #332]	; (8002220 <HAL_RCC_GetSysClockFreq+0x188>)
 80020d4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80020d6:	e098      	b.n	800220a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020d8:	4b4f      	ldr	r3, [pc, #316]	; (8002218 <HAL_RCC_GetSysClockFreq+0x180>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020e0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020e2:	4b4d      	ldr	r3, [pc, #308]	; (8002218 <HAL_RCC_GetSysClockFreq+0x180>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d028      	beq.n	8002140 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020ee:	4b4a      	ldr	r3, [pc, #296]	; (8002218 <HAL_RCC_GetSysClockFreq+0x180>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	099b      	lsrs	r3, r3, #6
 80020f4:	2200      	movs	r2, #0
 80020f6:	623b      	str	r3, [r7, #32]
 80020f8:	627a      	str	r2, [r7, #36]	; 0x24
 80020fa:	6a3b      	ldr	r3, [r7, #32]
 80020fc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002100:	2100      	movs	r1, #0
 8002102:	4b47      	ldr	r3, [pc, #284]	; (8002220 <HAL_RCC_GetSysClockFreq+0x188>)
 8002104:	fb03 f201 	mul.w	r2, r3, r1
 8002108:	2300      	movs	r3, #0
 800210a:	fb00 f303 	mul.w	r3, r0, r3
 800210e:	4413      	add	r3, r2
 8002110:	4a43      	ldr	r2, [pc, #268]	; (8002220 <HAL_RCC_GetSysClockFreq+0x188>)
 8002112:	fba0 1202 	umull	r1, r2, r0, r2
 8002116:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002118:	460a      	mov	r2, r1
 800211a:	62ba      	str	r2, [r7, #40]	; 0x28
 800211c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800211e:	4413      	add	r3, r2
 8002120:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002124:	2200      	movs	r2, #0
 8002126:	61bb      	str	r3, [r7, #24]
 8002128:	61fa      	str	r2, [r7, #28]
 800212a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800212e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002132:	f7fe f849 	bl	80001c8 <__aeabi_uldivmod>
 8002136:	4602      	mov	r2, r0
 8002138:	460b      	mov	r3, r1
 800213a:	4613      	mov	r3, r2
 800213c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800213e:	e053      	b.n	80021e8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002140:	4b35      	ldr	r3, [pc, #212]	; (8002218 <HAL_RCC_GetSysClockFreq+0x180>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	099b      	lsrs	r3, r3, #6
 8002146:	2200      	movs	r2, #0
 8002148:	613b      	str	r3, [r7, #16]
 800214a:	617a      	str	r2, [r7, #20]
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002152:	f04f 0b00 	mov.w	fp, #0
 8002156:	4652      	mov	r2, sl
 8002158:	465b      	mov	r3, fp
 800215a:	f04f 0000 	mov.w	r0, #0
 800215e:	f04f 0100 	mov.w	r1, #0
 8002162:	0159      	lsls	r1, r3, #5
 8002164:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002168:	0150      	lsls	r0, r2, #5
 800216a:	4602      	mov	r2, r0
 800216c:	460b      	mov	r3, r1
 800216e:	ebb2 080a 	subs.w	r8, r2, sl
 8002172:	eb63 090b 	sbc.w	r9, r3, fp
 8002176:	f04f 0200 	mov.w	r2, #0
 800217a:	f04f 0300 	mov.w	r3, #0
 800217e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002182:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002186:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800218a:	ebb2 0408 	subs.w	r4, r2, r8
 800218e:	eb63 0509 	sbc.w	r5, r3, r9
 8002192:	f04f 0200 	mov.w	r2, #0
 8002196:	f04f 0300 	mov.w	r3, #0
 800219a:	00eb      	lsls	r3, r5, #3
 800219c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021a0:	00e2      	lsls	r2, r4, #3
 80021a2:	4614      	mov	r4, r2
 80021a4:	461d      	mov	r5, r3
 80021a6:	eb14 030a 	adds.w	r3, r4, sl
 80021aa:	603b      	str	r3, [r7, #0]
 80021ac:	eb45 030b 	adc.w	r3, r5, fp
 80021b0:	607b      	str	r3, [r7, #4]
 80021b2:	f04f 0200 	mov.w	r2, #0
 80021b6:	f04f 0300 	mov.w	r3, #0
 80021ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80021be:	4629      	mov	r1, r5
 80021c0:	028b      	lsls	r3, r1, #10
 80021c2:	4621      	mov	r1, r4
 80021c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80021c8:	4621      	mov	r1, r4
 80021ca:	028a      	lsls	r2, r1, #10
 80021cc:	4610      	mov	r0, r2
 80021ce:	4619      	mov	r1, r3
 80021d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021d2:	2200      	movs	r2, #0
 80021d4:	60bb      	str	r3, [r7, #8]
 80021d6:	60fa      	str	r2, [r7, #12]
 80021d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80021dc:	f7fd fff4 	bl	80001c8 <__aeabi_uldivmod>
 80021e0:	4602      	mov	r2, r0
 80021e2:	460b      	mov	r3, r1
 80021e4:	4613      	mov	r3, r2
 80021e6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80021e8:	4b0b      	ldr	r3, [pc, #44]	; (8002218 <HAL_RCC_GetSysClockFreq+0x180>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	0c1b      	lsrs	r3, r3, #16
 80021ee:	f003 0303 	and.w	r3, r3, #3
 80021f2:	3301      	adds	r3, #1
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80021f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80021fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002200:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002202:	e002      	b.n	800220a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002204:	4b05      	ldr	r3, [pc, #20]	; (800221c <HAL_RCC_GetSysClockFreq+0x184>)
 8002206:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002208:	bf00      	nop
    }
  }
  return sysclockfreq;
 800220a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800220c:	4618      	mov	r0, r3
 800220e:	3740      	adds	r7, #64	; 0x40
 8002210:	46bd      	mov	sp, r7
 8002212:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002216:	bf00      	nop
 8002218:	40023800 	.word	0x40023800
 800221c:	00f42400 	.word	0x00f42400
 8002220:	017d7840 	.word	0x017d7840

08002224 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002228:	4b03      	ldr	r3, [pc, #12]	; (8002238 <HAL_RCC_GetHCLKFreq+0x14>)
 800222a:	681b      	ldr	r3, [r3, #0]
}
 800222c:	4618      	mov	r0, r3
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	20000000 	.word	0x20000000

0800223c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002240:	f7ff fff0 	bl	8002224 <HAL_RCC_GetHCLKFreq>
 8002244:	4602      	mov	r2, r0
 8002246:	4b05      	ldr	r3, [pc, #20]	; (800225c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	0a9b      	lsrs	r3, r3, #10
 800224c:	f003 0307 	and.w	r3, r3, #7
 8002250:	4903      	ldr	r1, [pc, #12]	; (8002260 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002252:	5ccb      	ldrb	r3, [r1, r3]
 8002254:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002258:	4618      	mov	r0, r3
 800225a:	bd80      	pop	{r7, pc}
 800225c:	40023800 	.word	0x40023800
 8002260:	08003d04 	.word	0x08003d04

08002264 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002268:	f7ff ffdc 	bl	8002224 <HAL_RCC_GetHCLKFreq>
 800226c:	4602      	mov	r2, r0
 800226e:	4b05      	ldr	r3, [pc, #20]	; (8002284 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	0b5b      	lsrs	r3, r3, #13
 8002274:	f003 0307 	and.w	r3, r3, #7
 8002278:	4903      	ldr	r1, [pc, #12]	; (8002288 <HAL_RCC_GetPCLK2Freq+0x24>)
 800227a:	5ccb      	ldrb	r3, [r1, r3]
 800227c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002280:	4618      	mov	r0, r3
 8002282:	bd80      	pop	{r7, pc}
 8002284:	40023800 	.word	0x40023800
 8002288:	08003d04 	.word	0x08003d04

0800228c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d101      	bne.n	800229e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e041      	b.n	8002322 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d106      	bne.n	80022b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f7fe fe66 	bl	8000f84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2202      	movs	r2, #2
 80022bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	3304      	adds	r3, #4
 80022c8:	4619      	mov	r1, r3
 80022ca:	4610      	mov	r0, r2
 80022cc:	f000 fb8a 	bl	80029e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2201      	movs	r2, #1
 80022e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2201      	movs	r2, #1
 80022fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2201      	movs	r2, #1
 800231c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b082      	sub	sp, #8
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d101      	bne.n	800233c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e041      	b.n	80023c0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002342:	b2db      	uxtb	r3, r3
 8002344:	2b00      	cmp	r3, #0
 8002346:	d106      	bne.n	8002356 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2200      	movs	r2, #0
 800234c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f000 f839 	bl	80023c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2202      	movs	r2, #2
 800235a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	3304      	adds	r3, #4
 8002366:	4619      	mov	r1, r3
 8002368:	4610      	mov	r0, r2
 800236a:	f000 fb3b 	bl	80029e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2201      	movs	r2, #1
 8002372:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2201      	movs	r2, #1
 800237a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2201      	movs	r2, #1
 8002382:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2201      	movs	r2, #1
 800238a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2201      	movs	r2, #1
 8002392:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2201      	movs	r2, #1
 800239a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2201      	movs	r2, #1
 80023a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2201      	movs	r2, #1
 80023aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2201      	movs	r2, #1
 80023b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2201      	movs	r2, #1
 80023ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023be:	2300      	movs	r3, #0
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3708      	adds	r7, #8
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80023d0:	bf00      	nop
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d109      	bne.n	8002400 <HAL_TIM_PWM_Start+0x24>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	bf14      	ite	ne
 80023f8:	2301      	movne	r3, #1
 80023fa:	2300      	moveq	r3, #0
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	e022      	b.n	8002446 <HAL_TIM_PWM_Start+0x6a>
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	2b04      	cmp	r3, #4
 8002404:	d109      	bne.n	800241a <HAL_TIM_PWM_Start+0x3e>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b01      	cmp	r3, #1
 8002410:	bf14      	ite	ne
 8002412:	2301      	movne	r3, #1
 8002414:	2300      	moveq	r3, #0
 8002416:	b2db      	uxtb	r3, r3
 8002418:	e015      	b.n	8002446 <HAL_TIM_PWM_Start+0x6a>
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	2b08      	cmp	r3, #8
 800241e:	d109      	bne.n	8002434 <HAL_TIM_PWM_Start+0x58>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002426:	b2db      	uxtb	r3, r3
 8002428:	2b01      	cmp	r3, #1
 800242a:	bf14      	ite	ne
 800242c:	2301      	movne	r3, #1
 800242e:	2300      	moveq	r3, #0
 8002430:	b2db      	uxtb	r3, r3
 8002432:	e008      	b.n	8002446 <HAL_TIM_PWM_Start+0x6a>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800243a:	b2db      	uxtb	r3, r3
 800243c:	2b01      	cmp	r3, #1
 800243e:	bf14      	ite	ne
 8002440:	2301      	movne	r3, #1
 8002442:	2300      	moveq	r3, #0
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e07c      	b.n	8002548 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d104      	bne.n	800245e <HAL_TIM_PWM_Start+0x82>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2202      	movs	r2, #2
 8002458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800245c:	e013      	b.n	8002486 <HAL_TIM_PWM_Start+0xaa>
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	2b04      	cmp	r3, #4
 8002462:	d104      	bne.n	800246e <HAL_TIM_PWM_Start+0x92>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2202      	movs	r2, #2
 8002468:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800246c:	e00b      	b.n	8002486 <HAL_TIM_PWM_Start+0xaa>
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	2b08      	cmp	r3, #8
 8002472:	d104      	bne.n	800247e <HAL_TIM_PWM_Start+0xa2>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2202      	movs	r2, #2
 8002478:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800247c:	e003      	b.n	8002486 <HAL_TIM_PWM_Start+0xaa>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2202      	movs	r2, #2
 8002482:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2201      	movs	r2, #1
 800248c:	6839      	ldr	r1, [r7, #0]
 800248e:	4618      	mov	r0, r3
 8002490:	f000 fe23 	bl	80030da <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a2d      	ldr	r2, [pc, #180]	; (8002550 <HAL_TIM_PWM_Start+0x174>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d004      	beq.n	80024a8 <HAL_TIM_PWM_Start+0xcc>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a2c      	ldr	r2, [pc, #176]	; (8002554 <HAL_TIM_PWM_Start+0x178>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d101      	bne.n	80024ac <HAL_TIM_PWM_Start+0xd0>
 80024a8:	2301      	movs	r3, #1
 80024aa:	e000      	b.n	80024ae <HAL_TIM_PWM_Start+0xd2>
 80024ac:	2300      	movs	r3, #0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d007      	beq.n	80024c2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a22      	ldr	r2, [pc, #136]	; (8002550 <HAL_TIM_PWM_Start+0x174>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d022      	beq.n	8002512 <HAL_TIM_PWM_Start+0x136>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024d4:	d01d      	beq.n	8002512 <HAL_TIM_PWM_Start+0x136>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a1f      	ldr	r2, [pc, #124]	; (8002558 <HAL_TIM_PWM_Start+0x17c>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d018      	beq.n	8002512 <HAL_TIM_PWM_Start+0x136>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a1d      	ldr	r2, [pc, #116]	; (800255c <HAL_TIM_PWM_Start+0x180>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d013      	beq.n	8002512 <HAL_TIM_PWM_Start+0x136>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a1c      	ldr	r2, [pc, #112]	; (8002560 <HAL_TIM_PWM_Start+0x184>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d00e      	beq.n	8002512 <HAL_TIM_PWM_Start+0x136>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a16      	ldr	r2, [pc, #88]	; (8002554 <HAL_TIM_PWM_Start+0x178>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d009      	beq.n	8002512 <HAL_TIM_PWM_Start+0x136>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a18      	ldr	r2, [pc, #96]	; (8002564 <HAL_TIM_PWM_Start+0x188>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d004      	beq.n	8002512 <HAL_TIM_PWM_Start+0x136>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a16      	ldr	r2, [pc, #88]	; (8002568 <HAL_TIM_PWM_Start+0x18c>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d111      	bne.n	8002536 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f003 0307 	and.w	r3, r3, #7
 800251c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2b06      	cmp	r3, #6
 8002522:	d010      	beq.n	8002546 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f042 0201 	orr.w	r2, r2, #1
 8002532:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002534:	e007      	b.n	8002546 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f042 0201 	orr.w	r2, r2, #1
 8002544:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002546:	2300      	movs	r3, #0
}
 8002548:	4618      	mov	r0, r3
 800254a:	3710      	adds	r7, #16
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	40010000 	.word	0x40010000
 8002554:	40010400 	.word	0x40010400
 8002558:	40000400 	.word	0x40000400
 800255c:	40000800 	.word	0x40000800
 8002560:	40000c00 	.word	0x40000c00
 8002564:	40014000 	.word	0x40014000
 8002568:	40001800 	.word	0x40001800

0800256c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	2200      	movs	r2, #0
 800257c:	6839      	ldr	r1, [r7, #0]
 800257e:	4618      	mov	r0, r3
 8002580:	f000 fdab 	bl	80030da <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a2e      	ldr	r2, [pc, #184]	; (8002644 <HAL_TIM_PWM_Stop+0xd8>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d004      	beq.n	8002598 <HAL_TIM_PWM_Stop+0x2c>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a2d      	ldr	r2, [pc, #180]	; (8002648 <HAL_TIM_PWM_Stop+0xdc>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d101      	bne.n	800259c <HAL_TIM_PWM_Stop+0x30>
 8002598:	2301      	movs	r3, #1
 800259a:	e000      	b.n	800259e <HAL_TIM_PWM_Stop+0x32>
 800259c:	2300      	movs	r3, #0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d017      	beq.n	80025d2 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	6a1a      	ldr	r2, [r3, #32]
 80025a8:	f241 1311 	movw	r3, #4369	; 0x1111
 80025ac:	4013      	ands	r3, r2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d10f      	bne.n	80025d2 <HAL_TIM_PWM_Stop+0x66>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	6a1a      	ldr	r2, [r3, #32]
 80025b8:	f240 4344 	movw	r3, #1092	; 0x444
 80025bc:	4013      	ands	r3, r2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d107      	bne.n	80025d2 <HAL_TIM_PWM_Stop+0x66>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025d0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	6a1a      	ldr	r2, [r3, #32]
 80025d8:	f241 1311 	movw	r3, #4369	; 0x1111
 80025dc:	4013      	ands	r3, r2
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d10f      	bne.n	8002602 <HAL_TIM_PWM_Stop+0x96>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	6a1a      	ldr	r2, [r3, #32]
 80025e8:	f240 4344 	movw	r3, #1092	; 0x444
 80025ec:	4013      	ands	r3, r2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d107      	bne.n	8002602 <HAL_TIM_PWM_Stop+0x96>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f022 0201 	bic.w	r2, r2, #1
 8002600:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d104      	bne.n	8002612 <HAL_TIM_PWM_Stop+0xa6>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002610:	e013      	b.n	800263a <HAL_TIM_PWM_Stop+0xce>
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	2b04      	cmp	r3, #4
 8002616:	d104      	bne.n	8002622 <HAL_TIM_PWM_Stop+0xb6>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002620:	e00b      	b.n	800263a <HAL_TIM_PWM_Stop+0xce>
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	2b08      	cmp	r3, #8
 8002626:	d104      	bne.n	8002632 <HAL_TIM_PWM_Stop+0xc6>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002630:	e003      	b.n	800263a <HAL_TIM_PWM_Stop+0xce>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2201      	movs	r2, #1
 8002636:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800263a:	2300      	movs	r3, #0
}
 800263c:	4618      	mov	r0, r3
 800263e:	3708      	adds	r7, #8
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	40010000 	.word	0x40010000
 8002648:	40010400 	.word	0x40010400

0800264c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b086      	sub	sp, #24
 8002650:	af00      	add	r7, sp, #0
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	60b9      	str	r1, [r7, #8]
 8002656:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002658:	2300      	movs	r3, #0
 800265a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002662:	2b01      	cmp	r3, #1
 8002664:	d101      	bne.n	800266a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002666:	2302      	movs	r3, #2
 8002668:	e0ae      	b.n	80027c8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2201      	movs	r2, #1
 800266e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2b0c      	cmp	r3, #12
 8002676:	f200 809f 	bhi.w	80027b8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800267a:	a201      	add	r2, pc, #4	; (adr r2, 8002680 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800267c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002680:	080026b5 	.word	0x080026b5
 8002684:	080027b9 	.word	0x080027b9
 8002688:	080027b9 	.word	0x080027b9
 800268c:	080027b9 	.word	0x080027b9
 8002690:	080026f5 	.word	0x080026f5
 8002694:	080027b9 	.word	0x080027b9
 8002698:	080027b9 	.word	0x080027b9
 800269c:	080027b9 	.word	0x080027b9
 80026a0:	08002737 	.word	0x08002737
 80026a4:	080027b9 	.word	0x080027b9
 80026a8:	080027b9 	.word	0x080027b9
 80026ac:	080027b9 	.word	0x080027b9
 80026b0:	08002777 	.word	0x08002777
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68b9      	ldr	r1, [r7, #8]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f000 fa32 	bl	8002b24 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	699a      	ldr	r2, [r3, #24]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f042 0208 	orr.w	r2, r2, #8
 80026ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	699a      	ldr	r2, [r3, #24]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f022 0204 	bic.w	r2, r2, #4
 80026de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	6999      	ldr	r1, [r3, #24]
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	691a      	ldr	r2, [r3, #16]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	430a      	orrs	r2, r1
 80026f0:	619a      	str	r2, [r3, #24]
      break;
 80026f2:	e064      	b.n	80027be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	68b9      	ldr	r1, [r7, #8]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f000 fa82 	bl	8002c04 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	699a      	ldr	r2, [r3, #24]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800270e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	699a      	ldr	r2, [r3, #24]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800271e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	6999      	ldr	r1, [r3, #24]
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	021a      	lsls	r2, r3, #8
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	430a      	orrs	r2, r1
 8002732:	619a      	str	r2, [r3, #24]
      break;
 8002734:	e043      	b.n	80027be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	68b9      	ldr	r1, [r7, #8]
 800273c:	4618      	mov	r0, r3
 800273e:	f000 fad7 	bl	8002cf0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	69da      	ldr	r2, [r3, #28]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f042 0208 	orr.w	r2, r2, #8
 8002750:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	69da      	ldr	r2, [r3, #28]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f022 0204 	bic.w	r2, r2, #4
 8002760:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	69d9      	ldr	r1, [r3, #28]
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	691a      	ldr	r2, [r3, #16]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	430a      	orrs	r2, r1
 8002772:	61da      	str	r2, [r3, #28]
      break;
 8002774:	e023      	b.n	80027be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	68b9      	ldr	r1, [r7, #8]
 800277c:	4618      	mov	r0, r3
 800277e:	f000 fb2b 	bl	8002dd8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	69da      	ldr	r2, [r3, #28]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002790:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	69da      	ldr	r2, [r3, #28]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	69d9      	ldr	r1, [r3, #28]
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	691b      	ldr	r3, [r3, #16]
 80027ac:	021a      	lsls	r2, r3, #8
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	430a      	orrs	r2, r1
 80027b4:	61da      	str	r2, [r3, #28]
      break;
 80027b6:	e002      	b.n	80027be <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	75fb      	strb	r3, [r7, #23]
      break;
 80027bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80027c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3718      	adds	r7, #24
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027da:	2300      	movs	r3, #0
 80027dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d101      	bne.n	80027ec <HAL_TIM_ConfigClockSource+0x1c>
 80027e8:	2302      	movs	r3, #2
 80027ea:	e0b4      	b.n	8002956 <HAL_TIM_ConfigClockSource+0x186>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2202      	movs	r2, #2
 80027f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800280a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002812:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	68ba      	ldr	r2, [r7, #8]
 800281a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002824:	d03e      	beq.n	80028a4 <HAL_TIM_ConfigClockSource+0xd4>
 8002826:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800282a:	f200 8087 	bhi.w	800293c <HAL_TIM_ConfigClockSource+0x16c>
 800282e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002832:	f000 8086 	beq.w	8002942 <HAL_TIM_ConfigClockSource+0x172>
 8002836:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800283a:	d87f      	bhi.n	800293c <HAL_TIM_ConfigClockSource+0x16c>
 800283c:	2b70      	cmp	r3, #112	; 0x70
 800283e:	d01a      	beq.n	8002876 <HAL_TIM_ConfigClockSource+0xa6>
 8002840:	2b70      	cmp	r3, #112	; 0x70
 8002842:	d87b      	bhi.n	800293c <HAL_TIM_ConfigClockSource+0x16c>
 8002844:	2b60      	cmp	r3, #96	; 0x60
 8002846:	d050      	beq.n	80028ea <HAL_TIM_ConfigClockSource+0x11a>
 8002848:	2b60      	cmp	r3, #96	; 0x60
 800284a:	d877      	bhi.n	800293c <HAL_TIM_ConfigClockSource+0x16c>
 800284c:	2b50      	cmp	r3, #80	; 0x50
 800284e:	d03c      	beq.n	80028ca <HAL_TIM_ConfigClockSource+0xfa>
 8002850:	2b50      	cmp	r3, #80	; 0x50
 8002852:	d873      	bhi.n	800293c <HAL_TIM_ConfigClockSource+0x16c>
 8002854:	2b40      	cmp	r3, #64	; 0x40
 8002856:	d058      	beq.n	800290a <HAL_TIM_ConfigClockSource+0x13a>
 8002858:	2b40      	cmp	r3, #64	; 0x40
 800285a:	d86f      	bhi.n	800293c <HAL_TIM_ConfigClockSource+0x16c>
 800285c:	2b30      	cmp	r3, #48	; 0x30
 800285e:	d064      	beq.n	800292a <HAL_TIM_ConfigClockSource+0x15a>
 8002860:	2b30      	cmp	r3, #48	; 0x30
 8002862:	d86b      	bhi.n	800293c <HAL_TIM_ConfigClockSource+0x16c>
 8002864:	2b20      	cmp	r3, #32
 8002866:	d060      	beq.n	800292a <HAL_TIM_ConfigClockSource+0x15a>
 8002868:	2b20      	cmp	r3, #32
 800286a:	d867      	bhi.n	800293c <HAL_TIM_ConfigClockSource+0x16c>
 800286c:	2b00      	cmp	r3, #0
 800286e:	d05c      	beq.n	800292a <HAL_TIM_ConfigClockSource+0x15a>
 8002870:	2b10      	cmp	r3, #16
 8002872:	d05a      	beq.n	800292a <HAL_TIM_ConfigClockSource+0x15a>
 8002874:	e062      	b.n	800293c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6818      	ldr	r0, [r3, #0]
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	6899      	ldr	r1, [r3, #8]
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685a      	ldr	r2, [r3, #4]
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	f000 fc08 	bl	800309a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002898:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	68ba      	ldr	r2, [r7, #8]
 80028a0:	609a      	str	r2, [r3, #8]
      break;
 80028a2:	e04f      	b.n	8002944 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6818      	ldr	r0, [r3, #0]
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	6899      	ldr	r1, [r3, #8]
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685a      	ldr	r2, [r3, #4]
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	f000 fbf1 	bl	800309a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	689a      	ldr	r2, [r3, #8]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028c6:	609a      	str	r2, [r3, #8]
      break;
 80028c8:	e03c      	b.n	8002944 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6818      	ldr	r0, [r3, #0]
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	6859      	ldr	r1, [r3, #4]
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	461a      	mov	r2, r3
 80028d8:	f000 fb65 	bl	8002fa6 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2150      	movs	r1, #80	; 0x50
 80028e2:	4618      	mov	r0, r3
 80028e4:	f000 fbbe 	bl	8003064 <TIM_ITRx_SetConfig>
      break;
 80028e8:	e02c      	b.n	8002944 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6818      	ldr	r0, [r3, #0]
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	6859      	ldr	r1, [r3, #4]
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	461a      	mov	r2, r3
 80028f8:	f000 fb84 	bl	8003004 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2160      	movs	r1, #96	; 0x60
 8002902:	4618      	mov	r0, r3
 8002904:	f000 fbae 	bl	8003064 <TIM_ITRx_SetConfig>
      break;
 8002908:	e01c      	b.n	8002944 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6818      	ldr	r0, [r3, #0]
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	6859      	ldr	r1, [r3, #4]
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	461a      	mov	r2, r3
 8002918:	f000 fb45 	bl	8002fa6 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2140      	movs	r1, #64	; 0x40
 8002922:	4618      	mov	r0, r3
 8002924:	f000 fb9e 	bl	8003064 <TIM_ITRx_SetConfig>
      break;
 8002928:	e00c      	b.n	8002944 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4619      	mov	r1, r3
 8002934:	4610      	mov	r0, r2
 8002936:	f000 fb95 	bl	8003064 <TIM_ITRx_SetConfig>
      break;
 800293a:	e003      	b.n	8002944 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	73fb      	strb	r3, [r7, #15]
      break;
 8002940:	e000      	b.n	8002944 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002942:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002954:	7bfb      	ldrb	r3, [r7, #15]
}
 8002956:	4618      	mov	r0, r3
 8002958:	3710      	adds	r7, #16
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800295e:	b580      	push	{r7, lr}
 8002960:	b082      	sub	sp, #8
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
 8002966:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800296e:	2b01      	cmp	r3, #1
 8002970:	d101      	bne.n	8002976 <HAL_TIM_SlaveConfigSynchro+0x18>
 8002972:	2302      	movs	r3, #2
 8002974:	e031      	b.n	80029da <HAL_TIM_SlaveConfigSynchro+0x7c>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2201      	movs	r2, #1
 800297a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2202      	movs	r2, #2
 8002982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8002986:	6839      	ldr	r1, [r7, #0]
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f000 fa7b 	bl	8002e84 <TIM_SlaveTimer_SetConfig>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d009      	beq.n	80029a8 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e018      	b.n	80029da <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68da      	ldr	r2, [r3, #12]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029b6:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	68da      	ldr	r2, [r3, #12]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80029c6:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029d8:	2300      	movs	r3, #0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3708      	adds	r7, #8
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
	...

080029e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	4a40      	ldr	r2, [pc, #256]	; (8002af8 <TIM_Base_SetConfig+0x114>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d013      	beq.n	8002a24 <TIM_Base_SetConfig+0x40>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a02:	d00f      	beq.n	8002a24 <TIM_Base_SetConfig+0x40>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4a3d      	ldr	r2, [pc, #244]	; (8002afc <TIM_Base_SetConfig+0x118>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d00b      	beq.n	8002a24 <TIM_Base_SetConfig+0x40>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4a3c      	ldr	r2, [pc, #240]	; (8002b00 <TIM_Base_SetConfig+0x11c>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d007      	beq.n	8002a24 <TIM_Base_SetConfig+0x40>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4a3b      	ldr	r2, [pc, #236]	; (8002b04 <TIM_Base_SetConfig+0x120>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d003      	beq.n	8002a24 <TIM_Base_SetConfig+0x40>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4a3a      	ldr	r2, [pc, #232]	; (8002b08 <TIM_Base_SetConfig+0x124>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d108      	bne.n	8002a36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	68fa      	ldr	r2, [r7, #12]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a2f      	ldr	r2, [pc, #188]	; (8002af8 <TIM_Base_SetConfig+0x114>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d02b      	beq.n	8002a96 <TIM_Base_SetConfig+0xb2>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a44:	d027      	beq.n	8002a96 <TIM_Base_SetConfig+0xb2>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a2c      	ldr	r2, [pc, #176]	; (8002afc <TIM_Base_SetConfig+0x118>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d023      	beq.n	8002a96 <TIM_Base_SetConfig+0xb2>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a2b      	ldr	r2, [pc, #172]	; (8002b00 <TIM_Base_SetConfig+0x11c>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d01f      	beq.n	8002a96 <TIM_Base_SetConfig+0xb2>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a2a      	ldr	r2, [pc, #168]	; (8002b04 <TIM_Base_SetConfig+0x120>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d01b      	beq.n	8002a96 <TIM_Base_SetConfig+0xb2>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a29      	ldr	r2, [pc, #164]	; (8002b08 <TIM_Base_SetConfig+0x124>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d017      	beq.n	8002a96 <TIM_Base_SetConfig+0xb2>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a28      	ldr	r2, [pc, #160]	; (8002b0c <TIM_Base_SetConfig+0x128>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d013      	beq.n	8002a96 <TIM_Base_SetConfig+0xb2>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a27      	ldr	r2, [pc, #156]	; (8002b10 <TIM_Base_SetConfig+0x12c>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d00f      	beq.n	8002a96 <TIM_Base_SetConfig+0xb2>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a26      	ldr	r2, [pc, #152]	; (8002b14 <TIM_Base_SetConfig+0x130>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d00b      	beq.n	8002a96 <TIM_Base_SetConfig+0xb2>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a25      	ldr	r2, [pc, #148]	; (8002b18 <TIM_Base_SetConfig+0x134>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d007      	beq.n	8002a96 <TIM_Base_SetConfig+0xb2>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a24      	ldr	r2, [pc, #144]	; (8002b1c <TIM_Base_SetConfig+0x138>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d003      	beq.n	8002a96 <TIM_Base_SetConfig+0xb2>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a23      	ldr	r2, [pc, #140]	; (8002b20 <TIM_Base_SetConfig+0x13c>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d108      	bne.n	8002aa8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	68fa      	ldr	r2, [r7, #12]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	695b      	ldr	r3, [r3, #20]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	689a      	ldr	r2, [r3, #8]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	4a0a      	ldr	r2, [pc, #40]	; (8002af8 <TIM_Base_SetConfig+0x114>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d003      	beq.n	8002adc <TIM_Base_SetConfig+0xf8>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4a0c      	ldr	r2, [pc, #48]	; (8002b08 <TIM_Base_SetConfig+0x124>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d103      	bne.n	8002ae4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	691a      	ldr	r2, [r3, #16]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	615a      	str	r2, [r3, #20]
}
 8002aea:	bf00      	nop
 8002aec:	3714      	adds	r7, #20
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	40010000 	.word	0x40010000
 8002afc:	40000400 	.word	0x40000400
 8002b00:	40000800 	.word	0x40000800
 8002b04:	40000c00 	.word	0x40000c00
 8002b08:	40010400 	.word	0x40010400
 8002b0c:	40014000 	.word	0x40014000
 8002b10:	40014400 	.word	0x40014400
 8002b14:	40014800 	.word	0x40014800
 8002b18:	40001800 	.word	0x40001800
 8002b1c:	40001c00 	.word	0x40001c00
 8002b20:	40002000 	.word	0x40002000

08002b24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b087      	sub	sp, #28
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a1b      	ldr	r3, [r3, #32]
 8002b32:	f023 0201 	bic.w	r2, r3, #1
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a1b      	ldr	r3, [r3, #32]
 8002b3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	699b      	ldr	r3, [r3, #24]
 8002b4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f023 0303 	bic.w	r3, r3, #3
 8002b5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	68fa      	ldr	r2, [r7, #12]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	f023 0302 	bic.w	r3, r3, #2
 8002b6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	697a      	ldr	r2, [r7, #20]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	4a20      	ldr	r2, [pc, #128]	; (8002bfc <TIM_OC1_SetConfig+0xd8>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d003      	beq.n	8002b88 <TIM_OC1_SetConfig+0x64>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	4a1f      	ldr	r2, [pc, #124]	; (8002c00 <TIM_OC1_SetConfig+0xdc>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d10c      	bne.n	8002ba2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	f023 0308 	bic.w	r3, r3, #8
 8002b8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	697a      	ldr	r2, [r7, #20]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	f023 0304 	bic.w	r3, r3, #4
 8002ba0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4a15      	ldr	r2, [pc, #84]	; (8002bfc <TIM_OC1_SetConfig+0xd8>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d003      	beq.n	8002bb2 <TIM_OC1_SetConfig+0x8e>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a14      	ldr	r2, [pc, #80]	; (8002c00 <TIM_OC1_SetConfig+0xdc>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d111      	bne.n	8002bd6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002bb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002bc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	695b      	ldr	r3, [r3, #20]
 8002bc6:	693a      	ldr	r2, [r7, #16]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	699b      	ldr	r3, [r3, #24]
 8002bd0:	693a      	ldr	r2, [r7, #16]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	693a      	ldr	r2, [r7, #16]
 8002bda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	685a      	ldr	r2, [r3, #4]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	697a      	ldr	r2, [r7, #20]
 8002bee:	621a      	str	r2, [r3, #32]
}
 8002bf0:	bf00      	nop
 8002bf2:	371c      	adds	r7, #28
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr
 8002bfc:	40010000 	.word	0x40010000
 8002c00:	40010400 	.word	0x40010400

08002c04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b087      	sub	sp, #28
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a1b      	ldr	r3, [r3, #32]
 8002c12:	f023 0210 	bic.w	r2, r3, #16
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a1b      	ldr	r3, [r3, #32]
 8002c1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	021b      	lsls	r3, r3, #8
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	f023 0320 	bic.w	r3, r3, #32
 8002c4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	011b      	lsls	r3, r3, #4
 8002c56:	697a      	ldr	r2, [r7, #20]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4a22      	ldr	r2, [pc, #136]	; (8002ce8 <TIM_OC2_SetConfig+0xe4>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d003      	beq.n	8002c6c <TIM_OC2_SetConfig+0x68>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	4a21      	ldr	r2, [pc, #132]	; (8002cec <TIM_OC2_SetConfig+0xe8>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d10d      	bne.n	8002c88 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	011b      	lsls	r3, r3, #4
 8002c7a:	697a      	ldr	r2, [r7, #20]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c86:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	4a17      	ldr	r2, [pc, #92]	; (8002ce8 <TIM_OC2_SetConfig+0xe4>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d003      	beq.n	8002c98 <TIM_OC2_SetConfig+0x94>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4a16      	ldr	r2, [pc, #88]	; (8002cec <TIM_OC2_SetConfig+0xe8>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d113      	bne.n	8002cc0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ca6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	695b      	ldr	r3, [r3, #20]
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	693a      	ldr	r2, [r7, #16]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	699b      	ldr	r3, [r3, #24]
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	693a      	ldr	r2, [r7, #16]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	693a      	ldr	r2, [r7, #16]
 8002cc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	68fa      	ldr	r2, [r7, #12]
 8002cca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685a      	ldr	r2, [r3, #4]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	697a      	ldr	r2, [r7, #20]
 8002cd8:	621a      	str	r2, [r3, #32]
}
 8002cda:	bf00      	nop
 8002cdc:	371c      	adds	r7, #28
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	40010000 	.word	0x40010000
 8002cec:	40010400 	.word	0x40010400

08002cf0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b087      	sub	sp, #28
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a1b      	ldr	r3, [r3, #32]
 8002cfe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a1b      	ldr	r3, [r3, #32]
 8002d0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	69db      	ldr	r3, [r3, #28]
 8002d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f023 0303 	bic.w	r3, r3, #3
 8002d26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	68fa      	ldr	r2, [r7, #12]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	021b      	lsls	r3, r3, #8
 8002d40:	697a      	ldr	r2, [r7, #20]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a21      	ldr	r2, [pc, #132]	; (8002dd0 <TIM_OC3_SetConfig+0xe0>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d003      	beq.n	8002d56 <TIM_OC3_SetConfig+0x66>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a20      	ldr	r2, [pc, #128]	; (8002dd4 <TIM_OC3_SetConfig+0xe4>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d10d      	bne.n	8002d72 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	021b      	lsls	r3, r3, #8
 8002d64:	697a      	ldr	r2, [r7, #20]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a16      	ldr	r2, [pc, #88]	; (8002dd0 <TIM_OC3_SetConfig+0xe0>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d003      	beq.n	8002d82 <TIM_OC3_SetConfig+0x92>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a15      	ldr	r2, [pc, #84]	; (8002dd4 <TIM_OC3_SetConfig+0xe4>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d113      	bne.n	8002daa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	011b      	lsls	r3, r3, #4
 8002d98:	693a      	ldr	r2, [r7, #16]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	699b      	ldr	r3, [r3, #24]
 8002da2:	011b      	lsls	r3, r3, #4
 8002da4:	693a      	ldr	r2, [r7, #16]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	693a      	ldr	r2, [r7, #16]
 8002dae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	68fa      	ldr	r2, [r7, #12]
 8002db4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	685a      	ldr	r2, [r3, #4]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	697a      	ldr	r2, [r7, #20]
 8002dc2:	621a      	str	r2, [r3, #32]
}
 8002dc4:	bf00      	nop
 8002dc6:	371c      	adds	r7, #28
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr
 8002dd0:	40010000 	.word	0x40010000
 8002dd4:	40010400 	.word	0x40010400

08002dd8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b087      	sub	sp, #28
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a1b      	ldr	r3, [r3, #32]
 8002de6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a1b      	ldr	r3, [r3, #32]
 8002df2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	69db      	ldr	r3, [r3, #28]
 8002dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	021b      	lsls	r3, r3, #8
 8002e16:	68fa      	ldr	r2, [r7, #12]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	031b      	lsls	r3, r3, #12
 8002e2a:	693a      	ldr	r2, [r7, #16]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4a12      	ldr	r2, [pc, #72]	; (8002e7c <TIM_OC4_SetConfig+0xa4>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d003      	beq.n	8002e40 <TIM_OC4_SetConfig+0x68>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4a11      	ldr	r2, [pc, #68]	; (8002e80 <TIM_OC4_SetConfig+0xa8>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d109      	bne.n	8002e54 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	695b      	ldr	r3, [r3, #20]
 8002e4c:	019b      	lsls	r3, r3, #6
 8002e4e:	697a      	ldr	r2, [r7, #20]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	697a      	ldr	r2, [r7, #20]
 8002e58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	68fa      	ldr	r2, [r7, #12]
 8002e5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685a      	ldr	r2, [r3, #4]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	693a      	ldr	r2, [r7, #16]
 8002e6c:	621a      	str	r2, [r3, #32]
}
 8002e6e:	bf00      	nop
 8002e70:	371c      	adds	r7, #28
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	40010000 	.word	0x40010000
 8002e80:	40010400 	.word	0x40010400

08002e84 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b086      	sub	sp, #24
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ea0:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	693a      	ldr	r2, [r7, #16]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	f023 0307 	bic.w	r3, r3, #7
 8002eb2:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	693a      	ldr	r2, [r7, #16]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	693a      	ldr	r2, [r7, #16]
 8002ec4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	2b70      	cmp	r3, #112	; 0x70
 8002ecc:	d01a      	beq.n	8002f04 <TIM_SlaveTimer_SetConfig+0x80>
 8002ece:	2b70      	cmp	r3, #112	; 0x70
 8002ed0:	d860      	bhi.n	8002f94 <TIM_SlaveTimer_SetConfig+0x110>
 8002ed2:	2b60      	cmp	r3, #96	; 0x60
 8002ed4:	d054      	beq.n	8002f80 <TIM_SlaveTimer_SetConfig+0xfc>
 8002ed6:	2b60      	cmp	r3, #96	; 0x60
 8002ed8:	d85c      	bhi.n	8002f94 <TIM_SlaveTimer_SetConfig+0x110>
 8002eda:	2b50      	cmp	r3, #80	; 0x50
 8002edc:	d046      	beq.n	8002f6c <TIM_SlaveTimer_SetConfig+0xe8>
 8002ede:	2b50      	cmp	r3, #80	; 0x50
 8002ee0:	d858      	bhi.n	8002f94 <TIM_SlaveTimer_SetConfig+0x110>
 8002ee2:	2b40      	cmp	r3, #64	; 0x40
 8002ee4:	d019      	beq.n	8002f1a <TIM_SlaveTimer_SetConfig+0x96>
 8002ee6:	2b40      	cmp	r3, #64	; 0x40
 8002ee8:	d854      	bhi.n	8002f94 <TIM_SlaveTimer_SetConfig+0x110>
 8002eea:	2b30      	cmp	r3, #48	; 0x30
 8002eec:	d055      	beq.n	8002f9a <TIM_SlaveTimer_SetConfig+0x116>
 8002eee:	2b30      	cmp	r3, #48	; 0x30
 8002ef0:	d850      	bhi.n	8002f94 <TIM_SlaveTimer_SetConfig+0x110>
 8002ef2:	2b20      	cmp	r3, #32
 8002ef4:	d051      	beq.n	8002f9a <TIM_SlaveTimer_SetConfig+0x116>
 8002ef6:	2b20      	cmp	r3, #32
 8002ef8:	d84c      	bhi.n	8002f94 <TIM_SlaveTimer_SetConfig+0x110>
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d04d      	beq.n	8002f9a <TIM_SlaveTimer_SetConfig+0x116>
 8002efe:	2b10      	cmp	r3, #16
 8002f00:	d04b      	beq.n	8002f9a <TIM_SlaveTimer_SetConfig+0x116>
 8002f02:	e047      	b.n	8002f94 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6818      	ldr	r0, [r3, #0]
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	68d9      	ldr	r1, [r3, #12]
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	689a      	ldr	r2, [r3, #8]
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	691b      	ldr	r3, [r3, #16]
 8002f14:	f000 f8c1 	bl	800309a <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8002f18:	e040      	b.n	8002f9c <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2b05      	cmp	r3, #5
 8002f20:	d101      	bne.n	8002f26 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e03b      	b.n	8002f9e <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	6a1b      	ldr	r3, [r3, #32]
 8002f2c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	6a1a      	ldr	r2, [r3, #32]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f022 0201 	bic.w	r2, r2, #1
 8002f3c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f4c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	011b      	lsls	r3, r3, #4
 8002f54:	68ba      	ldr	r2, [r7, #8]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68ba      	ldr	r2, [r7, #8]
 8002f60:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68fa      	ldr	r2, [r7, #12]
 8002f68:	621a      	str	r2, [r3, #32]
      break;
 8002f6a:	e017      	b.n	8002f9c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6818      	ldr	r0, [r3, #0]
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	6899      	ldr	r1, [r3, #8]
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	461a      	mov	r2, r3
 8002f7a:	f000 f814 	bl	8002fa6 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8002f7e:	e00d      	b.n	8002f9c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6818      	ldr	r0, [r3, #0]
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	6899      	ldr	r1, [r3, #8]
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	691b      	ldr	r3, [r3, #16]
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	f000 f839 	bl	8003004 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8002f92:	e003      	b.n	8002f9c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	75fb      	strb	r3, [r7, #23]
      break;
 8002f98:	e000      	b.n	8002f9c <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8002f9a:	bf00      	nop
  }

  return status;
 8002f9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3718      	adds	r7, #24
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}

08002fa6 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	b087      	sub	sp, #28
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	60f8      	str	r0, [r7, #12]
 8002fae:	60b9      	str	r1, [r7, #8]
 8002fb0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6a1b      	ldr	r3, [r3, #32]
 8002fb6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6a1b      	ldr	r3, [r3, #32]
 8002fbc:	f023 0201 	bic.w	r2, r3, #1
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	699b      	ldr	r3, [r3, #24]
 8002fc8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fd0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	011b      	lsls	r3, r3, #4
 8002fd6:	693a      	ldr	r2, [r7, #16]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	f023 030a 	bic.w	r3, r3, #10
 8002fe2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002fe4:	697a      	ldr	r2, [r7, #20]
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	693a      	ldr	r2, [r7, #16]
 8002ff0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	697a      	ldr	r2, [r7, #20]
 8002ff6:	621a      	str	r2, [r3, #32]
}
 8002ff8:	bf00      	nop
 8002ffa:	371c      	adds	r7, #28
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003004:	b480      	push	{r7}
 8003006:	b087      	sub	sp, #28
 8003008:	af00      	add	r7, sp, #0
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6a1b      	ldr	r3, [r3, #32]
 8003014:	f023 0210 	bic.w	r2, r3, #16
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6a1b      	ldr	r3, [r3, #32]
 8003026:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800302e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	031b      	lsls	r3, r3, #12
 8003034:	697a      	ldr	r2, [r7, #20]
 8003036:	4313      	orrs	r3, r2
 8003038:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003040:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	011b      	lsls	r3, r3, #4
 8003046:	693a      	ldr	r2, [r7, #16]
 8003048:	4313      	orrs	r3, r2
 800304a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	697a      	ldr	r2, [r7, #20]
 8003050:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	693a      	ldr	r2, [r7, #16]
 8003056:	621a      	str	r2, [r3, #32]
}
 8003058:	bf00      	nop
 800305a:	371c      	adds	r7, #28
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003064:	b480      	push	{r7}
 8003066:	b085      	sub	sp, #20
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800307a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800307c:	683a      	ldr	r2, [r7, #0]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	4313      	orrs	r3, r2
 8003082:	f043 0307 	orr.w	r3, r3, #7
 8003086:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	68fa      	ldr	r2, [r7, #12]
 800308c:	609a      	str	r2, [r3, #8]
}
 800308e:	bf00      	nop
 8003090:	3714      	adds	r7, #20
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr

0800309a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800309a:	b480      	push	{r7}
 800309c:	b087      	sub	sp, #28
 800309e:	af00      	add	r7, sp, #0
 80030a0:	60f8      	str	r0, [r7, #12]
 80030a2:	60b9      	str	r1, [r7, #8]
 80030a4:	607a      	str	r2, [r7, #4]
 80030a6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030b4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	021a      	lsls	r2, r3, #8
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	431a      	orrs	r2, r3
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	697a      	ldr	r2, [r7, #20]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	697a      	ldr	r2, [r7, #20]
 80030cc:	609a      	str	r2, [r3, #8]
}
 80030ce:	bf00      	nop
 80030d0:	371c      	adds	r7, #28
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr

080030da <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80030da:	b480      	push	{r7}
 80030dc:	b087      	sub	sp, #28
 80030de:	af00      	add	r7, sp, #0
 80030e0:	60f8      	str	r0, [r7, #12]
 80030e2:	60b9      	str	r1, [r7, #8]
 80030e4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	f003 031f 	and.w	r3, r3, #31
 80030ec:	2201      	movs	r2, #1
 80030ee:	fa02 f303 	lsl.w	r3, r2, r3
 80030f2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6a1a      	ldr	r2, [r3, #32]
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	43db      	mvns	r3, r3
 80030fc:	401a      	ands	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6a1a      	ldr	r2, [r3, #32]
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	f003 031f 	and.w	r3, r3, #31
 800310c:	6879      	ldr	r1, [r7, #4]
 800310e:	fa01 f303 	lsl.w	r3, r1, r3
 8003112:	431a      	orrs	r2, r3
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	621a      	str	r2, [r3, #32]
}
 8003118:	bf00      	nop
 800311a:	371c      	adds	r7, #28
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003124:	b480      	push	{r7}
 8003126:	b085      	sub	sp, #20
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003134:	2b01      	cmp	r3, #1
 8003136:	d101      	bne.n	800313c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003138:	2302      	movs	r3, #2
 800313a:	e05a      	b.n	80031f2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2202      	movs	r2, #2
 8003148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003162:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	68fa      	ldr	r2, [r7, #12]
 800316a:	4313      	orrs	r3, r2
 800316c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a21      	ldr	r2, [pc, #132]	; (8003200 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d022      	beq.n	80031c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003188:	d01d      	beq.n	80031c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a1d      	ldr	r2, [pc, #116]	; (8003204 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d018      	beq.n	80031c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a1b      	ldr	r2, [pc, #108]	; (8003208 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d013      	beq.n	80031c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a1a      	ldr	r2, [pc, #104]	; (800320c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d00e      	beq.n	80031c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a18      	ldr	r2, [pc, #96]	; (8003210 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d009      	beq.n	80031c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a17      	ldr	r2, [pc, #92]	; (8003214 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d004      	beq.n	80031c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a15      	ldr	r2, [pc, #84]	; (8003218 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d10c      	bne.n	80031e0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	68ba      	ldr	r2, [r7, #8]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68ba      	ldr	r2, [r7, #8]
 80031de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3714      	adds	r7, #20
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	40010000 	.word	0x40010000
 8003204:	40000400 	.word	0x40000400
 8003208:	40000800 	.word	0x40000800
 800320c:	40000c00 	.word	0x40000c00
 8003210:	40010400 	.word	0x40010400
 8003214:	40014000 	.word	0x40014000
 8003218:	40001800 	.word	0x40001800

0800321c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d101      	bne.n	800322e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e03f      	b.n	80032ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003234:	b2db      	uxtb	r3, r3
 8003236:	2b00      	cmp	r3, #0
 8003238:	d106      	bne.n	8003248 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f7fd ff84 	bl	8001150 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2224      	movs	r2, #36	; 0x24
 800324c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	68da      	ldr	r2, [r3, #12]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800325e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f000 fa9b 	bl	800379c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	691a      	ldr	r2, [r3, #16]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003274:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	695a      	ldr	r2, [r3, #20]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003284:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	68da      	ldr	r2, [r3, #12]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003294:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2220      	movs	r2, #32
 80032a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2220      	movs	r2, #32
 80032a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3708      	adds	r7, #8
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}

080032b6 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80032b6:	b580      	push	{r7, lr}
 80032b8:	b084      	sub	sp, #16
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	60f8      	str	r0, [r7, #12]
 80032be:	60b9      	str	r1, [r7, #8]
 80032c0:	4613      	mov	r3, r2
 80032c2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	2b20      	cmp	r3, #32
 80032ce:	d11d      	bne.n	800330c <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d002      	beq.n	80032dc <HAL_UART_Receive_DMA+0x26>
 80032d6:	88fb      	ldrh	r3, [r7, #6]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d101      	bne.n	80032e0 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e016      	b.n	800330e <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d101      	bne.n	80032ee <HAL_UART_Receive_DMA+0x38>
 80032ea:	2302      	movs	r3, #2
 80032ec:	e00f      	b.n	800330e <HAL_UART_Receive_DMA+0x58>
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2201      	movs	r2, #1
 80032f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2200      	movs	r2, #0
 80032fa:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80032fc:	88fb      	ldrh	r3, [r7, #6]
 80032fe:	461a      	mov	r2, r3
 8003300:	68b9      	ldr	r1, [r7, #8]
 8003302:	68f8      	ldr	r0, [r7, #12]
 8003304:	f000 f920 	bl	8003548 <UART_Start_Receive_DMA>
 8003308:	4603      	mov	r3, r0
 800330a:	e000      	b.n	800330e <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800330c:	2302      	movs	r3, #2
  }
}
 800330e:	4618      	mov	r0, r3
 8003310:	3710      	adds	r7, #16
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}

08003316 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003316:	b480      	push	{r7}
 8003318:	b083      	sub	sp, #12
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800331e:	bf00      	nop
 8003320:	370c      	adds	r7, #12
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr

0800332a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800332a:	b480      	push	{r7}
 800332c:	b083      	sub	sp, #12
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003332:	bf00      	nop
 8003334:	370c      	adds	r7, #12
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr

0800333e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800333e:	b480      	push	{r7}
 8003340:	b083      	sub	sp, #12
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
 8003346:	460b      	mov	r3, r1
 8003348:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800334a:	bf00      	nop
 800334c:	370c      	adds	r7, #12
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr

08003356 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003356:	b580      	push	{r7, lr}
 8003358:	b09c      	sub	sp, #112	; 0x70
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003362:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800336e:	2b00      	cmp	r3, #0
 8003370:	d172      	bne.n	8003458 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003372:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003374:	2200      	movs	r2, #0
 8003376:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003378:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	330c      	adds	r3, #12
 800337e:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003380:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003382:	e853 3f00 	ldrex	r3, [r3]
 8003386:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003388:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800338a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800338e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003390:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	330c      	adds	r3, #12
 8003396:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003398:	65ba      	str	r2, [r7, #88]	; 0x58
 800339a:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800339c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800339e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80033a0:	e841 2300 	strex	r3, r2, [r1]
 80033a4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80033a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d1e5      	bne.n	8003378 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	3314      	adds	r3, #20
 80033b2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033b6:	e853 3f00 	ldrex	r3, [r3]
 80033ba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80033bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033be:	f023 0301 	bic.w	r3, r3, #1
 80033c2:	667b      	str	r3, [r7, #100]	; 0x64
 80033c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	3314      	adds	r3, #20
 80033ca:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80033cc:	647a      	str	r2, [r7, #68]	; 0x44
 80033ce:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033d0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80033d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80033d4:	e841 2300 	strex	r3, r2, [r1]
 80033d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80033da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d1e5      	bne.n	80033ac <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	3314      	adds	r3, #20
 80033e6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ea:	e853 3f00 	ldrex	r3, [r3]
 80033ee:	623b      	str	r3, [r7, #32]
   return(result);
 80033f0:	6a3b      	ldr	r3, [r7, #32]
 80033f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033f6:	663b      	str	r3, [r7, #96]	; 0x60
 80033f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	3314      	adds	r3, #20
 80033fe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003400:	633a      	str	r2, [r7, #48]	; 0x30
 8003402:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003404:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003406:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003408:	e841 2300 	strex	r3, r2, [r1]
 800340c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800340e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003410:	2b00      	cmp	r3, #0
 8003412:	d1e5      	bne.n	80033e0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003414:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003416:	2220      	movs	r2, #32
 8003418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800341c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800341e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003420:	2b01      	cmp	r3, #1
 8003422:	d119      	bne.n	8003458 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003424:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	330c      	adds	r3, #12
 800342a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	e853 3f00 	ldrex	r3, [r3]
 8003432:	60fb      	str	r3, [r7, #12]
   return(result);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f023 0310 	bic.w	r3, r3, #16
 800343a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800343c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	330c      	adds	r3, #12
 8003442:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003444:	61fa      	str	r2, [r7, #28]
 8003446:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003448:	69b9      	ldr	r1, [r7, #24]
 800344a:	69fa      	ldr	r2, [r7, #28]
 800344c:	e841 2300 	strex	r3, r2, [r1]
 8003450:	617b      	str	r3, [r7, #20]
   return(result);
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d1e5      	bne.n	8003424 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003458:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800345a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345c:	2b01      	cmp	r3, #1
 800345e:	d106      	bne.n	800346e <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003460:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003462:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003464:	4619      	mov	r1, r3
 8003466:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003468:	f7ff ff69 	bl	800333e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800346c:	e002      	b.n	8003474 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800346e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003470:	f7fd fa32 	bl	80008d8 <HAL_UART_RxCpltCallback>
}
 8003474:	bf00      	nop
 8003476:	3770      	adds	r7, #112	; 0x70
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003488:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348e:	2b01      	cmp	r3, #1
 8003490:	d108      	bne.n	80034a4 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003496:	085b      	lsrs	r3, r3, #1
 8003498:	b29b      	uxth	r3, r3
 800349a:	4619      	mov	r1, r3
 800349c:	68f8      	ldr	r0, [r7, #12]
 800349e:	f7ff ff4e 	bl	800333e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80034a2:	e002      	b.n	80034aa <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80034a4:	68f8      	ldr	r0, [r7, #12]
 80034a6:	f7ff ff36 	bl	8003316 <HAL_UART_RxHalfCpltCallback>
}
 80034aa:	bf00      	nop
 80034ac:	3710      	adds	r7, #16
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}

080034b2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80034b2:	b580      	push	{r7, lr}
 80034b4:	b084      	sub	sp, #16
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80034ba:	2300      	movs	r3, #0
 80034bc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	695b      	ldr	r3, [r3, #20]
 80034ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ce:	2b80      	cmp	r3, #128	; 0x80
 80034d0:	bf0c      	ite	eq
 80034d2:	2301      	moveq	r3, #1
 80034d4:	2300      	movne	r3, #0
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2b21      	cmp	r3, #33	; 0x21
 80034e4:	d108      	bne.n	80034f8 <UART_DMAError+0x46>
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d005      	beq.n	80034f8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	2200      	movs	r2, #0
 80034f0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80034f2:	68b8      	ldr	r0, [r7, #8]
 80034f4:	f000 f8c6 	bl	8003684 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	695b      	ldr	r3, [r3, #20]
 80034fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003502:	2b40      	cmp	r3, #64	; 0x40
 8003504:	bf0c      	ite	eq
 8003506:	2301      	moveq	r3, #1
 8003508:	2300      	movne	r3, #0
 800350a:	b2db      	uxtb	r3, r3
 800350c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003514:	b2db      	uxtb	r3, r3
 8003516:	2b22      	cmp	r3, #34	; 0x22
 8003518:	d108      	bne.n	800352c <UART_DMAError+0x7a>
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d005      	beq.n	800352c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	2200      	movs	r2, #0
 8003524:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003526:	68b8      	ldr	r0, [r7, #8]
 8003528:	f000 f8d4 	bl	80036d4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003530:	f043 0210 	orr.w	r2, r3, #16
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003538:	68b8      	ldr	r0, [r7, #8]
 800353a:	f7ff fef6 	bl	800332a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800353e:	bf00      	nop
 8003540:	3710      	adds	r7, #16
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
	...

08003548 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b098      	sub	sp, #96	; 0x60
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	4613      	mov	r3, r2
 8003554:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003556:	68ba      	ldr	r2, [r7, #8]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	88fa      	ldrh	r2, [r7, #6]
 8003560:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2222      	movs	r2, #34	; 0x22
 800356c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003574:	4a40      	ldr	r2, [pc, #256]	; (8003678 <UART_Start_Receive_DMA+0x130>)
 8003576:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800357c:	4a3f      	ldr	r2, [pc, #252]	; (800367c <UART_Start_Receive_DMA+0x134>)
 800357e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003584:	4a3e      	ldr	r2, [pc, #248]	; (8003680 <UART_Start_Receive_DMA+0x138>)
 8003586:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800358c:	2200      	movs	r2, #0
 800358e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003590:	f107 0308 	add.w	r3, r7, #8
 8003594:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	3304      	adds	r3, #4
 80035a0:	4619      	mov	r1, r3
 80035a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	88fb      	ldrh	r3, [r7, #6]
 80035a8:	f7fd ffdb 	bl	8001562 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80035ac:	2300      	movs	r3, #0
 80035ae:	613b      	str	r3, [r7, #16]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	613b      	str	r3, [r7, #16]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	613b      	str	r3, [r7, #16]
 80035c0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d019      	beq.n	8003606 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	330c      	adds	r3, #12
 80035d8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035dc:	e853 3f00 	ldrex	r3, [r3]
 80035e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80035e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035e8:	65bb      	str	r3, [r7, #88]	; 0x58
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	330c      	adds	r3, #12
 80035f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80035f2:	64fa      	str	r2, [r7, #76]	; 0x4c
 80035f4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035f6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80035f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80035fa:	e841 2300 	strex	r3, r2, [r1]
 80035fe:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003600:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003602:	2b00      	cmp	r3, #0
 8003604:	d1e5      	bne.n	80035d2 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	3314      	adds	r3, #20
 800360c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800360e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003610:	e853 3f00 	ldrex	r3, [r3]
 8003614:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003618:	f043 0301 	orr.w	r3, r3, #1
 800361c:	657b      	str	r3, [r7, #84]	; 0x54
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	3314      	adds	r3, #20
 8003624:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003626:	63ba      	str	r2, [r7, #56]	; 0x38
 8003628:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800362a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800362c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800362e:	e841 2300 	strex	r3, r2, [r1]
 8003632:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003636:	2b00      	cmp	r3, #0
 8003638:	d1e5      	bne.n	8003606 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	3314      	adds	r3, #20
 8003640:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	e853 3f00 	ldrex	r3, [r3]
 8003648:	617b      	str	r3, [r7, #20]
   return(result);
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003650:	653b      	str	r3, [r7, #80]	; 0x50
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	3314      	adds	r3, #20
 8003658:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800365a:	627a      	str	r2, [r7, #36]	; 0x24
 800365c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800365e:	6a39      	ldr	r1, [r7, #32]
 8003660:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003662:	e841 2300 	strex	r3, r2, [r1]
 8003666:	61fb      	str	r3, [r7, #28]
   return(result);
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d1e5      	bne.n	800363a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800366e:	2300      	movs	r3, #0
}
 8003670:	4618      	mov	r0, r3
 8003672:	3760      	adds	r7, #96	; 0x60
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}
 8003678:	08003357 	.word	0x08003357
 800367c:	0800347d 	.word	0x0800347d
 8003680:	080034b3 	.word	0x080034b3

08003684 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003684:	b480      	push	{r7}
 8003686:	b089      	sub	sp, #36	; 0x24
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	330c      	adds	r3, #12
 8003692:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	e853 3f00 	ldrex	r3, [r3]
 800369a:	60bb      	str	r3, [r7, #8]
   return(result);
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80036a2:	61fb      	str	r3, [r7, #28]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	330c      	adds	r3, #12
 80036aa:	69fa      	ldr	r2, [r7, #28]
 80036ac:	61ba      	str	r2, [r7, #24]
 80036ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036b0:	6979      	ldr	r1, [r7, #20]
 80036b2:	69ba      	ldr	r2, [r7, #24]
 80036b4:	e841 2300 	strex	r3, r2, [r1]
 80036b8:	613b      	str	r3, [r7, #16]
   return(result);
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d1e5      	bne.n	800368c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2220      	movs	r2, #32
 80036c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80036c8:	bf00      	nop
 80036ca:	3724      	adds	r7, #36	; 0x24
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b095      	sub	sp, #84	; 0x54
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	330c      	adds	r3, #12
 80036e2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036e6:	e853 3f00 	ldrex	r3, [r3]
 80036ea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80036ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80036f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	330c      	adds	r3, #12
 80036fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80036fc:	643a      	str	r2, [r7, #64]	; 0x40
 80036fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003700:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003702:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003704:	e841 2300 	strex	r3, r2, [r1]
 8003708:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800370a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800370c:	2b00      	cmp	r3, #0
 800370e:	d1e5      	bne.n	80036dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	3314      	adds	r3, #20
 8003716:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003718:	6a3b      	ldr	r3, [r7, #32]
 800371a:	e853 3f00 	ldrex	r3, [r3]
 800371e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	f023 0301 	bic.w	r3, r3, #1
 8003726:	64bb      	str	r3, [r7, #72]	; 0x48
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	3314      	adds	r3, #20
 800372e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003730:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003732:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003734:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003736:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003738:	e841 2300 	strex	r3, r2, [r1]
 800373c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800373e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003740:	2b00      	cmp	r3, #0
 8003742:	d1e5      	bne.n	8003710 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003748:	2b01      	cmp	r3, #1
 800374a:	d119      	bne.n	8003780 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	330c      	adds	r3, #12
 8003752:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	e853 3f00 	ldrex	r3, [r3]
 800375a:	60bb      	str	r3, [r7, #8]
   return(result);
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	f023 0310 	bic.w	r3, r3, #16
 8003762:	647b      	str	r3, [r7, #68]	; 0x44
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	330c      	adds	r3, #12
 800376a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800376c:	61ba      	str	r2, [r7, #24]
 800376e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003770:	6979      	ldr	r1, [r7, #20]
 8003772:	69ba      	ldr	r2, [r7, #24]
 8003774:	e841 2300 	strex	r3, r2, [r1]
 8003778:	613b      	str	r3, [r7, #16]
   return(result);
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d1e5      	bne.n	800374c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2220      	movs	r2, #32
 8003784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800378e:	bf00      	nop
 8003790:	3754      	adds	r7, #84	; 0x54
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr
	...

0800379c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800379c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037a0:	b0c0      	sub	sp, #256	; 0x100
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	691b      	ldr	r3, [r3, #16]
 80037b0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80037b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037b8:	68d9      	ldr	r1, [r3, #12]
 80037ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	ea40 0301 	orr.w	r3, r0, r1
 80037c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80037c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037ca:	689a      	ldr	r2, [r3, #8]
 80037cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	431a      	orrs	r2, r3
 80037d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037d8:	695b      	ldr	r3, [r3, #20]
 80037da:	431a      	orrs	r2, r3
 80037dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037e0:	69db      	ldr	r3, [r3, #28]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80037e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80037f4:	f021 010c 	bic.w	r1, r1, #12
 80037f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003802:	430b      	orrs	r3, r1
 8003804:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	695b      	ldr	r3, [r3, #20]
 800380e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003812:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003816:	6999      	ldr	r1, [r3, #24]
 8003818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	ea40 0301 	orr.w	r3, r0, r1
 8003822:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	4b8f      	ldr	r3, [pc, #572]	; (8003a68 <UART_SetConfig+0x2cc>)
 800382c:	429a      	cmp	r2, r3
 800382e:	d005      	beq.n	800383c <UART_SetConfig+0xa0>
 8003830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	4b8d      	ldr	r3, [pc, #564]	; (8003a6c <UART_SetConfig+0x2d0>)
 8003838:	429a      	cmp	r2, r3
 800383a:	d104      	bne.n	8003846 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800383c:	f7fe fd12 	bl	8002264 <HAL_RCC_GetPCLK2Freq>
 8003840:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003844:	e003      	b.n	800384e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003846:	f7fe fcf9 	bl	800223c <HAL_RCC_GetPCLK1Freq>
 800384a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800384e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003852:	69db      	ldr	r3, [r3, #28]
 8003854:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003858:	f040 810c 	bne.w	8003a74 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800385c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003860:	2200      	movs	r2, #0
 8003862:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003866:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800386a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800386e:	4622      	mov	r2, r4
 8003870:	462b      	mov	r3, r5
 8003872:	1891      	adds	r1, r2, r2
 8003874:	65b9      	str	r1, [r7, #88]	; 0x58
 8003876:	415b      	adcs	r3, r3
 8003878:	65fb      	str	r3, [r7, #92]	; 0x5c
 800387a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800387e:	4621      	mov	r1, r4
 8003880:	eb12 0801 	adds.w	r8, r2, r1
 8003884:	4629      	mov	r1, r5
 8003886:	eb43 0901 	adc.w	r9, r3, r1
 800388a:	f04f 0200 	mov.w	r2, #0
 800388e:	f04f 0300 	mov.w	r3, #0
 8003892:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003896:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800389a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800389e:	4690      	mov	r8, r2
 80038a0:	4699      	mov	r9, r3
 80038a2:	4623      	mov	r3, r4
 80038a4:	eb18 0303 	adds.w	r3, r8, r3
 80038a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80038ac:	462b      	mov	r3, r5
 80038ae:	eb49 0303 	adc.w	r3, r9, r3
 80038b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80038b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80038c2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80038c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80038ca:	460b      	mov	r3, r1
 80038cc:	18db      	adds	r3, r3, r3
 80038ce:	653b      	str	r3, [r7, #80]	; 0x50
 80038d0:	4613      	mov	r3, r2
 80038d2:	eb42 0303 	adc.w	r3, r2, r3
 80038d6:	657b      	str	r3, [r7, #84]	; 0x54
 80038d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80038dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80038e0:	f7fc fc72 	bl	80001c8 <__aeabi_uldivmod>
 80038e4:	4602      	mov	r2, r0
 80038e6:	460b      	mov	r3, r1
 80038e8:	4b61      	ldr	r3, [pc, #388]	; (8003a70 <UART_SetConfig+0x2d4>)
 80038ea:	fba3 2302 	umull	r2, r3, r3, r2
 80038ee:	095b      	lsrs	r3, r3, #5
 80038f0:	011c      	lsls	r4, r3, #4
 80038f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038f6:	2200      	movs	r2, #0
 80038f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80038fc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003900:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003904:	4642      	mov	r2, r8
 8003906:	464b      	mov	r3, r9
 8003908:	1891      	adds	r1, r2, r2
 800390a:	64b9      	str	r1, [r7, #72]	; 0x48
 800390c:	415b      	adcs	r3, r3
 800390e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003910:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003914:	4641      	mov	r1, r8
 8003916:	eb12 0a01 	adds.w	sl, r2, r1
 800391a:	4649      	mov	r1, r9
 800391c:	eb43 0b01 	adc.w	fp, r3, r1
 8003920:	f04f 0200 	mov.w	r2, #0
 8003924:	f04f 0300 	mov.w	r3, #0
 8003928:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800392c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003930:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003934:	4692      	mov	sl, r2
 8003936:	469b      	mov	fp, r3
 8003938:	4643      	mov	r3, r8
 800393a:	eb1a 0303 	adds.w	r3, sl, r3
 800393e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003942:	464b      	mov	r3, r9
 8003944:	eb4b 0303 	adc.w	r3, fp, r3
 8003948:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800394c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003958:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800395c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003960:	460b      	mov	r3, r1
 8003962:	18db      	adds	r3, r3, r3
 8003964:	643b      	str	r3, [r7, #64]	; 0x40
 8003966:	4613      	mov	r3, r2
 8003968:	eb42 0303 	adc.w	r3, r2, r3
 800396c:	647b      	str	r3, [r7, #68]	; 0x44
 800396e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003972:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003976:	f7fc fc27 	bl	80001c8 <__aeabi_uldivmod>
 800397a:	4602      	mov	r2, r0
 800397c:	460b      	mov	r3, r1
 800397e:	4611      	mov	r1, r2
 8003980:	4b3b      	ldr	r3, [pc, #236]	; (8003a70 <UART_SetConfig+0x2d4>)
 8003982:	fba3 2301 	umull	r2, r3, r3, r1
 8003986:	095b      	lsrs	r3, r3, #5
 8003988:	2264      	movs	r2, #100	; 0x64
 800398a:	fb02 f303 	mul.w	r3, r2, r3
 800398e:	1acb      	subs	r3, r1, r3
 8003990:	00db      	lsls	r3, r3, #3
 8003992:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003996:	4b36      	ldr	r3, [pc, #216]	; (8003a70 <UART_SetConfig+0x2d4>)
 8003998:	fba3 2302 	umull	r2, r3, r3, r2
 800399c:	095b      	lsrs	r3, r3, #5
 800399e:	005b      	lsls	r3, r3, #1
 80039a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80039a4:	441c      	add	r4, r3
 80039a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039aa:	2200      	movs	r2, #0
 80039ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80039b0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80039b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80039b8:	4642      	mov	r2, r8
 80039ba:	464b      	mov	r3, r9
 80039bc:	1891      	adds	r1, r2, r2
 80039be:	63b9      	str	r1, [r7, #56]	; 0x38
 80039c0:	415b      	adcs	r3, r3
 80039c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80039c8:	4641      	mov	r1, r8
 80039ca:	1851      	adds	r1, r2, r1
 80039cc:	6339      	str	r1, [r7, #48]	; 0x30
 80039ce:	4649      	mov	r1, r9
 80039d0:	414b      	adcs	r3, r1
 80039d2:	637b      	str	r3, [r7, #52]	; 0x34
 80039d4:	f04f 0200 	mov.w	r2, #0
 80039d8:	f04f 0300 	mov.w	r3, #0
 80039dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80039e0:	4659      	mov	r1, fp
 80039e2:	00cb      	lsls	r3, r1, #3
 80039e4:	4651      	mov	r1, sl
 80039e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039ea:	4651      	mov	r1, sl
 80039ec:	00ca      	lsls	r2, r1, #3
 80039ee:	4610      	mov	r0, r2
 80039f0:	4619      	mov	r1, r3
 80039f2:	4603      	mov	r3, r0
 80039f4:	4642      	mov	r2, r8
 80039f6:	189b      	adds	r3, r3, r2
 80039f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80039fc:	464b      	mov	r3, r9
 80039fe:	460a      	mov	r2, r1
 8003a00:	eb42 0303 	adc.w	r3, r2, r3
 8003a04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003a14:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003a18:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003a1c:	460b      	mov	r3, r1
 8003a1e:	18db      	adds	r3, r3, r3
 8003a20:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a22:	4613      	mov	r3, r2
 8003a24:	eb42 0303 	adc.w	r3, r2, r3
 8003a28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a2e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003a32:	f7fc fbc9 	bl	80001c8 <__aeabi_uldivmod>
 8003a36:	4602      	mov	r2, r0
 8003a38:	460b      	mov	r3, r1
 8003a3a:	4b0d      	ldr	r3, [pc, #52]	; (8003a70 <UART_SetConfig+0x2d4>)
 8003a3c:	fba3 1302 	umull	r1, r3, r3, r2
 8003a40:	095b      	lsrs	r3, r3, #5
 8003a42:	2164      	movs	r1, #100	; 0x64
 8003a44:	fb01 f303 	mul.w	r3, r1, r3
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	00db      	lsls	r3, r3, #3
 8003a4c:	3332      	adds	r3, #50	; 0x32
 8003a4e:	4a08      	ldr	r2, [pc, #32]	; (8003a70 <UART_SetConfig+0x2d4>)
 8003a50:	fba2 2303 	umull	r2, r3, r2, r3
 8003a54:	095b      	lsrs	r3, r3, #5
 8003a56:	f003 0207 	and.w	r2, r3, #7
 8003a5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4422      	add	r2, r4
 8003a62:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003a64:	e106      	b.n	8003c74 <UART_SetConfig+0x4d8>
 8003a66:	bf00      	nop
 8003a68:	40011000 	.word	0x40011000
 8003a6c:	40011400 	.word	0x40011400
 8003a70:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003a7e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003a82:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003a86:	4642      	mov	r2, r8
 8003a88:	464b      	mov	r3, r9
 8003a8a:	1891      	adds	r1, r2, r2
 8003a8c:	6239      	str	r1, [r7, #32]
 8003a8e:	415b      	adcs	r3, r3
 8003a90:	627b      	str	r3, [r7, #36]	; 0x24
 8003a92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a96:	4641      	mov	r1, r8
 8003a98:	1854      	adds	r4, r2, r1
 8003a9a:	4649      	mov	r1, r9
 8003a9c:	eb43 0501 	adc.w	r5, r3, r1
 8003aa0:	f04f 0200 	mov.w	r2, #0
 8003aa4:	f04f 0300 	mov.w	r3, #0
 8003aa8:	00eb      	lsls	r3, r5, #3
 8003aaa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003aae:	00e2      	lsls	r2, r4, #3
 8003ab0:	4614      	mov	r4, r2
 8003ab2:	461d      	mov	r5, r3
 8003ab4:	4643      	mov	r3, r8
 8003ab6:	18e3      	adds	r3, r4, r3
 8003ab8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003abc:	464b      	mov	r3, r9
 8003abe:	eb45 0303 	adc.w	r3, r5, r3
 8003ac2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003ac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003ad2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003ad6:	f04f 0200 	mov.w	r2, #0
 8003ada:	f04f 0300 	mov.w	r3, #0
 8003ade:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003ae2:	4629      	mov	r1, r5
 8003ae4:	008b      	lsls	r3, r1, #2
 8003ae6:	4621      	mov	r1, r4
 8003ae8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003aec:	4621      	mov	r1, r4
 8003aee:	008a      	lsls	r2, r1, #2
 8003af0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003af4:	f7fc fb68 	bl	80001c8 <__aeabi_uldivmod>
 8003af8:	4602      	mov	r2, r0
 8003afa:	460b      	mov	r3, r1
 8003afc:	4b60      	ldr	r3, [pc, #384]	; (8003c80 <UART_SetConfig+0x4e4>)
 8003afe:	fba3 2302 	umull	r2, r3, r3, r2
 8003b02:	095b      	lsrs	r3, r3, #5
 8003b04:	011c      	lsls	r4, r3, #4
 8003b06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003b10:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003b14:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003b18:	4642      	mov	r2, r8
 8003b1a:	464b      	mov	r3, r9
 8003b1c:	1891      	adds	r1, r2, r2
 8003b1e:	61b9      	str	r1, [r7, #24]
 8003b20:	415b      	adcs	r3, r3
 8003b22:	61fb      	str	r3, [r7, #28]
 8003b24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b28:	4641      	mov	r1, r8
 8003b2a:	1851      	adds	r1, r2, r1
 8003b2c:	6139      	str	r1, [r7, #16]
 8003b2e:	4649      	mov	r1, r9
 8003b30:	414b      	adcs	r3, r1
 8003b32:	617b      	str	r3, [r7, #20]
 8003b34:	f04f 0200 	mov.w	r2, #0
 8003b38:	f04f 0300 	mov.w	r3, #0
 8003b3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b40:	4659      	mov	r1, fp
 8003b42:	00cb      	lsls	r3, r1, #3
 8003b44:	4651      	mov	r1, sl
 8003b46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b4a:	4651      	mov	r1, sl
 8003b4c:	00ca      	lsls	r2, r1, #3
 8003b4e:	4610      	mov	r0, r2
 8003b50:	4619      	mov	r1, r3
 8003b52:	4603      	mov	r3, r0
 8003b54:	4642      	mov	r2, r8
 8003b56:	189b      	adds	r3, r3, r2
 8003b58:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003b5c:	464b      	mov	r3, r9
 8003b5e:	460a      	mov	r2, r1
 8003b60:	eb42 0303 	adc.w	r3, r2, r3
 8003b64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	67bb      	str	r3, [r7, #120]	; 0x78
 8003b72:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003b74:	f04f 0200 	mov.w	r2, #0
 8003b78:	f04f 0300 	mov.w	r3, #0
 8003b7c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003b80:	4649      	mov	r1, r9
 8003b82:	008b      	lsls	r3, r1, #2
 8003b84:	4641      	mov	r1, r8
 8003b86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b8a:	4641      	mov	r1, r8
 8003b8c:	008a      	lsls	r2, r1, #2
 8003b8e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003b92:	f7fc fb19 	bl	80001c8 <__aeabi_uldivmod>
 8003b96:	4602      	mov	r2, r0
 8003b98:	460b      	mov	r3, r1
 8003b9a:	4611      	mov	r1, r2
 8003b9c:	4b38      	ldr	r3, [pc, #224]	; (8003c80 <UART_SetConfig+0x4e4>)
 8003b9e:	fba3 2301 	umull	r2, r3, r3, r1
 8003ba2:	095b      	lsrs	r3, r3, #5
 8003ba4:	2264      	movs	r2, #100	; 0x64
 8003ba6:	fb02 f303 	mul.w	r3, r2, r3
 8003baa:	1acb      	subs	r3, r1, r3
 8003bac:	011b      	lsls	r3, r3, #4
 8003bae:	3332      	adds	r3, #50	; 0x32
 8003bb0:	4a33      	ldr	r2, [pc, #204]	; (8003c80 <UART_SetConfig+0x4e4>)
 8003bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb6:	095b      	lsrs	r3, r3, #5
 8003bb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bbc:	441c      	add	r4, r3
 8003bbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	673b      	str	r3, [r7, #112]	; 0x70
 8003bc6:	677a      	str	r2, [r7, #116]	; 0x74
 8003bc8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003bcc:	4642      	mov	r2, r8
 8003bce:	464b      	mov	r3, r9
 8003bd0:	1891      	adds	r1, r2, r2
 8003bd2:	60b9      	str	r1, [r7, #8]
 8003bd4:	415b      	adcs	r3, r3
 8003bd6:	60fb      	str	r3, [r7, #12]
 8003bd8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003bdc:	4641      	mov	r1, r8
 8003bde:	1851      	adds	r1, r2, r1
 8003be0:	6039      	str	r1, [r7, #0]
 8003be2:	4649      	mov	r1, r9
 8003be4:	414b      	adcs	r3, r1
 8003be6:	607b      	str	r3, [r7, #4]
 8003be8:	f04f 0200 	mov.w	r2, #0
 8003bec:	f04f 0300 	mov.w	r3, #0
 8003bf0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003bf4:	4659      	mov	r1, fp
 8003bf6:	00cb      	lsls	r3, r1, #3
 8003bf8:	4651      	mov	r1, sl
 8003bfa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bfe:	4651      	mov	r1, sl
 8003c00:	00ca      	lsls	r2, r1, #3
 8003c02:	4610      	mov	r0, r2
 8003c04:	4619      	mov	r1, r3
 8003c06:	4603      	mov	r3, r0
 8003c08:	4642      	mov	r2, r8
 8003c0a:	189b      	adds	r3, r3, r2
 8003c0c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c0e:	464b      	mov	r3, r9
 8003c10:	460a      	mov	r2, r1
 8003c12:	eb42 0303 	adc.w	r3, r2, r3
 8003c16:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	663b      	str	r3, [r7, #96]	; 0x60
 8003c22:	667a      	str	r2, [r7, #100]	; 0x64
 8003c24:	f04f 0200 	mov.w	r2, #0
 8003c28:	f04f 0300 	mov.w	r3, #0
 8003c2c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003c30:	4649      	mov	r1, r9
 8003c32:	008b      	lsls	r3, r1, #2
 8003c34:	4641      	mov	r1, r8
 8003c36:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c3a:	4641      	mov	r1, r8
 8003c3c:	008a      	lsls	r2, r1, #2
 8003c3e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003c42:	f7fc fac1 	bl	80001c8 <__aeabi_uldivmod>
 8003c46:	4602      	mov	r2, r0
 8003c48:	460b      	mov	r3, r1
 8003c4a:	4b0d      	ldr	r3, [pc, #52]	; (8003c80 <UART_SetConfig+0x4e4>)
 8003c4c:	fba3 1302 	umull	r1, r3, r3, r2
 8003c50:	095b      	lsrs	r3, r3, #5
 8003c52:	2164      	movs	r1, #100	; 0x64
 8003c54:	fb01 f303 	mul.w	r3, r1, r3
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	011b      	lsls	r3, r3, #4
 8003c5c:	3332      	adds	r3, #50	; 0x32
 8003c5e:	4a08      	ldr	r2, [pc, #32]	; (8003c80 <UART_SetConfig+0x4e4>)
 8003c60:	fba2 2303 	umull	r2, r3, r2, r3
 8003c64:	095b      	lsrs	r3, r3, #5
 8003c66:	f003 020f 	and.w	r2, r3, #15
 8003c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4422      	add	r2, r4
 8003c72:	609a      	str	r2, [r3, #8]
}
 8003c74:	bf00      	nop
 8003c76:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c80:	51eb851f 	.word	0x51eb851f

08003c84 <memset>:
 8003c84:	4402      	add	r2, r0
 8003c86:	4603      	mov	r3, r0
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d100      	bne.n	8003c8e <memset+0xa>
 8003c8c:	4770      	bx	lr
 8003c8e:	f803 1b01 	strb.w	r1, [r3], #1
 8003c92:	e7f9      	b.n	8003c88 <memset+0x4>

08003c94 <__libc_init_array>:
 8003c94:	b570      	push	{r4, r5, r6, lr}
 8003c96:	4d0d      	ldr	r5, [pc, #52]	; (8003ccc <__libc_init_array+0x38>)
 8003c98:	4c0d      	ldr	r4, [pc, #52]	; (8003cd0 <__libc_init_array+0x3c>)
 8003c9a:	1b64      	subs	r4, r4, r5
 8003c9c:	10a4      	asrs	r4, r4, #2
 8003c9e:	2600      	movs	r6, #0
 8003ca0:	42a6      	cmp	r6, r4
 8003ca2:	d109      	bne.n	8003cb8 <__libc_init_array+0x24>
 8003ca4:	4d0b      	ldr	r5, [pc, #44]	; (8003cd4 <__libc_init_array+0x40>)
 8003ca6:	4c0c      	ldr	r4, [pc, #48]	; (8003cd8 <__libc_init_array+0x44>)
 8003ca8:	f000 f818 	bl	8003cdc <_init>
 8003cac:	1b64      	subs	r4, r4, r5
 8003cae:	10a4      	asrs	r4, r4, #2
 8003cb0:	2600      	movs	r6, #0
 8003cb2:	42a6      	cmp	r6, r4
 8003cb4:	d105      	bne.n	8003cc2 <__libc_init_array+0x2e>
 8003cb6:	bd70      	pop	{r4, r5, r6, pc}
 8003cb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cbc:	4798      	blx	r3
 8003cbe:	3601      	adds	r6, #1
 8003cc0:	e7ee      	b.n	8003ca0 <__libc_init_array+0xc>
 8003cc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cc6:	4798      	blx	r3
 8003cc8:	3601      	adds	r6, #1
 8003cca:	e7f2      	b.n	8003cb2 <__libc_init_array+0x1e>
 8003ccc:	08003d14 	.word	0x08003d14
 8003cd0:	08003d14 	.word	0x08003d14
 8003cd4:	08003d14 	.word	0x08003d14
 8003cd8:	08003d18 	.word	0x08003d18

08003cdc <_init>:
 8003cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cde:	bf00      	nop
 8003ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ce2:	bc08      	pop	{r3}
 8003ce4:	469e      	mov	lr, r3
 8003ce6:	4770      	bx	lr

08003ce8 <_fini>:
 8003ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cea:	bf00      	nop
 8003cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cee:	bc08      	pop	{r3}
 8003cf0:	469e      	mov	lr, r3
 8003cf2:	4770      	bx	lr
